
SmartHomeProject_EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  00002afe  00002b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080023e  0080023e  00002d70  2**0
                  ALLOC
  3 .stab         00003174  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001998  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__vector_10>
      2c:	0c 94 25 11 	jmp	0x224a	; 0x224a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 11 	call	0x2374	; 0x2374 <main>
      8a:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e2       	ldi	r22, 0x29	; 41
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 5c       	subi	r30, 0xCF	; 207
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_Init>:
#include "ADC.h"

static PtrToFuncType CallBackFunc_ADC_INT = 0;

void ADC_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX = ADMUX_ENABLE_MSK;
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	80 83       	st	Z, r24
	ADCSRA = ADCSRA_ENABLE_MSK;
     e3e:	e6 e2       	ldi	r30, 0x26	; 38
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	87 ed       	ldi	r24, 0xD7	; 215
     e44:	80 83       	st	Z, r24
	GI_EN();
     e46:	af e5       	ldi	r26, 0x5F	; 95
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ef e5       	ldi	r30, 0x5F	; 95
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8c 93       	st	X, r24
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <ADC_GetResult>:

u16 ADC_GetResult(u8 ADC_Channel) {
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	89 83       	std	Y+1, r24	; 0x01

	ADC_Channel &= ADC_CHANNEL_CLEAR_MSK;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	87 70       	andi	r24, 0x07	; 7
     e6a:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ADMUX_CLEAR_MSK;
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 7e       	andi	r24, 0xE0	; 224
     e78:	8c 93       	st	X, r24
	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= ADC_Channel;
     e7a:	a7 e2       	ldi	r26, 0x27	; 39
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e2       	ldi	r30, 0x27	; 39
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	90 81       	ld	r25, Z
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	89 2b       	or	r24, r25
     e88:	8c 93       	st	X, r24

	ADCSRA |= START_CONVERSION_MSK;
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 64       	ori	r24, 0x40	; 64
     e96:	8c 93       	st	X, r24

	return ADC;/* return the data register */
     e98:	e4 e2       	ldi	r30, 0x24	; 36
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <ADC_EnableInterrupt>:

void ADC_EnableInterrupt(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= ADCSRA_ENABLE_INT_MSK;
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	8c 93       	st	X, r24
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <ADC_IntSetCallBackFunc>:

void ADC_IntSetCallBackFunc(PtrToFuncType ptrToFunc)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <ADC_IntSetCallBackFunc+0x6>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunc_ADC_INT = ptrToFunc;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	90 93 3f 02 	sts	0x023F, r25
     eda:	80 93 3e 02 	sts	0x023E, r24
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <__vector_16>:

ADC_INT()
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFunc_ADC_INT != 0)
     f12:	80 91 3e 02 	lds	r24, 0x023E
     f16:	90 91 3f 02 	lds	r25, 0x023F
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	29 f0       	breq	.+10     	; 0xf28 <__vector_16+0x40>
	{
		CallBackFunc_ADC_INT();
     f1e:	e0 91 3e 02 	lds	r30, 0x023E
     f22:	f0 91 3f 02 	lds	r31, 0x023F
     f26:	09 95       	icall
	}
}
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <BUZZER_Initialize>:
 */
#include "DIO.h"
#include "BUZZER.h"

void BUZZER_Initialize()
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(BUZZER, 	HIGH);
     f56:	84 e1       	ldi	r24, 0x14	; 20
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <BUZZER_ON>:

void BUZZER_ON()
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(BUZZER, HIGH);
     f6c:	84 e1       	ldi	r24, 0x14	; 20
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <BUZZER_OFF>:

void BUZZER_OFF()
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(BUZZER, LOW);
     f82:	84 e1       	ldi	r24, 0x14	; 20
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <DC_MOTOR_Initialize>:
 */
#include "DIO.h"
#include "DC_MOTOR.h"

void DC_MOTOR_Initialize()
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(DC_MOTOR, HIGH); //Set DDR Output
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DC_MOTOR_ON>:

void DC_MOTOR_ON()
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPin(DC_MOTOR, HIGH);
     fae:	87 e0       	ldi	r24, 0x07	; 7
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <DC_MOTOR_OFF>:

void DC_MOTOR_OFF()
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(DC_MOTOR, LOW);
     fc4:	87 e0       	ldi	r24, 0x07	; 7
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <DIO_voidSetDDR>:
#include "DIO_REG.h"
#include "DIO.h"
#define PORTS_RANGE 8

void DIO_voidSetDDR(H_PINS pinIndex, u8 directionStatus)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_voidSetDDR+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_voidSetDDR+0x8>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6a 83       	std	Y+2, r22	; 0x02
	switch(pinIndex)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3c 83       	std	Y+4, r19	; 0x04
     fea:	2b 83       	std	Y+3, r18	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	80 31       	cpi	r24, 0x10	; 16
     ff2:	91 05       	cpc	r25, r1
     ff4:	64 f4       	brge	.+24     	; 0x100e <DIO_voidSetDDR+0x3c>
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	3c 81       	ldd	r19, Y+4	; 0x04
     ffa:	28 30       	cpi	r18, 0x08	; 8
     ffc:	31 05       	cpc	r19, r1
     ffe:	0c f0       	brlt	.+2      	; 0x1002 <DIO_voidSetDDR+0x30>
    1000:	43 c0       	rjmp	.+134    	; 0x1088 <DIO_voidSetDDR+0xb6>
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	99 23       	and	r25, r25
    1008:	0c f4       	brge	.+2      	; 0x100c <DIO_voidSetDDR+0x3a>
    100a:	de c0       	rjmp	.+444    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <DIO_voidSetDDR+0x56>
    100e:	2b 81       	ldd	r18, Y+3	; 0x03
    1010:	3c 81       	ldd	r19, Y+4	; 0x04
    1012:	28 31       	cpi	r18, 0x18	; 24
    1014:	31 05       	cpc	r19, r1
    1016:	0c f4       	brge	.+2      	; 0x101a <DIO_voidSetDDR+0x48>
    1018:	6d c0       	rjmp	.+218    	; 0x10f4 <DIO_voidSetDDR+0x122>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	80 32       	cpi	r24, 0x20	; 32
    1020:	91 05       	cpc	r25, r1
    1022:	0c f0       	brlt	.+2      	; 0x1026 <DIO_voidSetDDR+0x54>
    1024:	d1 c0       	rjmp	.+418    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
    1026:	9c c0       	rjmp	.+312    	; 0x1160 <DIO_voidSetDDR+0x18e>
	{

		//Don't use pinVal directly cause we need it at statements cause we need it at specific conditions
		case 0 ... 7: if(directionStatus == HIGH)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	a1 f4       	brne	.+40     	; 0x1056 <DIO_voidSetDDR+0x84>
					  {
					      SET_BIT(DDRD, pinIndex);
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_voidSetDDR+0x7a>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_voidSetDDR+0x76>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	b9 c0       	rjmp	.+370    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					  }
					  else if(directionStatus == LOW)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	88 23       	and	r24, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <DIO_voidSetDDR+0x8c>
    105c:	b5 c0       	rjmp	.+362    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					  {
						  CLEAR_BIT(DDRD, pinIndex);
    105e:	a1 e3       	ldi	r26, 0x31	; 49
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e1 e3       	ldi	r30, 0x31	; 49
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_voidSetDDR+0xaa>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_voidSetDDR+0xa6>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	a0 c0       	rjmp	.+320    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					  {
						  //Error on LCD
					  }
					  break;

		case 8 ... 15: if(directionStatus == HIGH)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	b9 f4       	brne	.+46     	; 0x10bc <DIO_voidSetDDR+0xea>
					   {
					      SET_BIT(DDRC, (pinIndex-PORTS_RANGE));
    108e:	a4 e3       	ldi	r26, 0x34	; 52
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e4 e3       	ldi	r30, 0x34	; 52
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 01       	movw	r18, r24
    10a2:	28 50       	subi	r18, 0x08	; 8
    10a4:	30 40       	sbci	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_voidSetDDR+0xe0>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_voidSetDDR+0xdc>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	86 c0       	rjmp	.+268    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					   }
					   else if(directionStatus == LOW)
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	88 23       	and	r24, r24
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <DIO_voidSetDDR+0xf2>
    10c2:	82 c0       	rjmp	.+260    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					   {
						  CLEAR_BIT(DDRC, (pinIndex-PORTS_RANGE));
    10c4:	a4 e3       	ldi	r26, 0x34	; 52
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 01       	movw	r18, r24
    10d8:	28 50       	subi	r18, 0x08	; 8
    10da:	30 40       	sbci	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_voidSetDDR+0x116>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_voidSetDDR+0x112>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	6a c0       	rjmp	.+212    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					   {
						  //Error on LCD
					   }
					   break;

		case 16 ... 23: if(directionStatus == HIGH)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	b9 f4       	brne	.+46     	; 0x1128 <DIO_voidSetDDR+0x156>
					    {
						  SET_BIT(DDRB, (pinIndex-(2*PORTS_RANGE)));
    10fa:	a7 e3       	ldi	r26, 0x37	; 55
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e7 e3       	ldi	r30, 0x37	; 55
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 01       	movw	r18, r24
    110e:	20 51       	subi	r18, 0x10	; 16
    1110:	30 40       	sbci	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_voidSetDDR+0x14c>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_voidSetDDR+0x148>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	50 c0       	rjmp	.+160    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					    }
					    else if(directionStatus == LOW)
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 23       	and	r24, r24
    112c:	09 f0       	breq	.+2      	; 0x1130 <DIO_voidSetDDR+0x15e>
    112e:	4c c0       	rjmp	.+152    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					    {
					      CLEAR_BIT(DDRB, (pinIndex-(2*PORTS_RANGE)));
    1130:	a7 e3       	ldi	r26, 0x37	; 55
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e7 e3       	ldi	r30, 0x37	; 55
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 01       	movw	r18, r24
    1144:	20 51       	subi	r18, 0x10	; 16
    1146:	30 40       	sbci	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_voidSetDDR+0x182>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_voidSetDDR+0x17e>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	34 c0       	rjmp	.+104    	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					    {
						  //Error on LCD
					    }
						break;

		case 24 ... 31: if(directionStatus == HIGH)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	b9 f4       	brne	.+46     	; 0x1194 <DIO_voidSetDDR+0x1c2>
					    {
					      SET_BIT(DDRA, (pinIndex-(3*PORTS_RANGE)));
    1166:	aa e3       	ldi	r26, 0x3A	; 58
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 01       	movw	r18, r24
    117a:	28 51       	subi	r18, 0x18	; 24
    117c:	30 40       	sbci	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_voidSetDDR+0x1b8>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_voidSetDDR+0x1b4>
    118e:	84 2b       	or	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	1a c0       	rjmp	.+52     	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					    }
					    else if(directionStatus == LOW)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 23       	and	r24, r24
    1198:	b9 f4       	brne	.+46     	; 0x11c8 <DIO_voidSetDDR+0x1f6>
					    {
					      CLEAR_BIT(DDRA, (pinIndex-(3*PORTS_RANGE)));
    119a:	aa e3       	ldi	r26, 0x3A	; 58
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	ea e3       	ldi	r30, 0x3A	; 58
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9c 01       	movw	r18, r24
    11ae:	28 51       	subi	r18, 0x18	; 24
    11b0:	30 40       	sbci	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_voidSetDDR+0x1ec>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_voidSetDDR+0x1e8>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
					    {
						  //Error on LCD
					    }
						break;
		}
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_voidSetPort>:

void DIO_voidSetPort(H_PORTS port, u8 portVal)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_voidSetPort+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_voidSetPort+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	d1 f0       	breq	.+52     	; 0x122e <DIO_voidSetPort+0x58>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_voidSetPort+0x38>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <DIO_voidSetPort+0x4e>
    120c:	1e c0       	rjmp	.+60     	; 0x124a <DIO_voidSetPort+0x74>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <DIO_voidSetPort+0x62>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <DIO_voidSetPort+0x6c>
    1222:	13 c0       	rjmp	.+38     	; 0x124a <DIO_voidSetPort+0x74>
	{
		case H_PORTA: PORTA = portVal;
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	0e c0       	rjmp	.+28     	; 0x124a <DIO_voidSetPort+0x74>
					 break;

		case H_PORTB: PORTB = portVal;
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	09 c0       	rjmp	.+18     	; 0x124a <DIO_voidSetPort+0x74>
					 break;

		case H_PORTC: PORTC = portVal;
    1238:	e5 e3       	ldi	r30, 0x35	; 53
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
    1240:	04 c0       	rjmp	.+8      	; 0x124a <DIO_voidSetPort+0x74>
					 break;

		case H_PORTD: PORTD = portVal;
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 83       	st	Z, r24
					 break;
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <DIO_voidSetPin>:

void DIO_voidSetPin(H_PINS pinIndex, u8 pinVal)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <DIO_voidSetPin+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <DIO_voidSetPin+0x8>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02
	switch(pinIndex)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3c 83       	std	Y+4, r19	; 0x04
    1270:	2b 83       	std	Y+3, r18	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	80 31       	cpi	r24, 0x10	; 16
    1278:	91 05       	cpc	r25, r1
    127a:	64 f4       	brge	.+24     	; 0x1294 <DIO_voidSetPin+0x3c>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	28 30       	cpi	r18, 0x08	; 8
    1282:	31 05       	cpc	r19, r1
    1284:	0c f0       	brlt	.+2      	; 0x1288 <DIO_voidSetPin+0x30>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <DIO_voidSetPin+0xb6>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	99 23       	and	r25, r25
    128e:	0c f4       	brge	.+2      	; 0x1292 <DIO_voidSetPin+0x3a>
    1290:	de c0       	rjmp	.+444    	; 0x144e <DIO_voidSetPin+0x1f6>
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <DIO_voidSetPin+0x56>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	28 31       	cpi	r18, 0x18	; 24
    129a:	31 05       	cpc	r19, r1
    129c:	0c f4       	brge	.+2      	; 0x12a0 <DIO_voidSetPin+0x48>
    129e:	6d c0       	rjmp	.+218    	; 0x137a <DIO_voidSetPin+0x122>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	80 32       	cpi	r24, 0x20	; 32
    12a6:	91 05       	cpc	r25, r1
    12a8:	0c f0       	brlt	.+2      	; 0x12ac <DIO_voidSetPin+0x54>
    12aa:	d1 c0       	rjmp	.+418    	; 0x144e <DIO_voidSetPin+0x1f6>
    12ac:	9c c0       	rjmp	.+312    	; 0x13e6 <DIO_voidSetPin+0x18e>
	{
		//Don't use pinVal directly cause we need it at statements cause we need it at specific conditions
		case 0 ... 7: if(pinVal == HIGH)
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <DIO_voidSetPin+0x84>
					  {
					      SET_BIT(PORTD, pinIndex);
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_voidSetPin+0x7a>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_voidSetPin+0x76>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	b9 c0       	rjmp	.+370    	; 0x144e <DIO_voidSetPin+0x1f6>
					  }
					  else if(pinVal == LOW)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	88 23       	and	r24, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <DIO_voidSetPin+0x8c>
    12e2:	b5 c0       	rjmp	.+362    	; 0x144e <DIO_voidSetPin+0x1f6>
					  {
						  CLEAR_BIT(PORTD, pinIndex);
    12e4:	a2 e3       	ldi	r26, 0x32	; 50
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e2 e3       	ldi	r30, 0x32	; 50
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_voidSetPin+0xaa>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_voidSetPin+0xa6>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	a0 c0       	rjmp	.+320    	; 0x144e <DIO_voidSetPin+0x1f6>
					  {
						  //Error on LCD
					  }
					  break;

		case 8 ... 15: if(pinVal == HIGH)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	b9 f4       	brne	.+46     	; 0x1342 <DIO_voidSetPin+0xea>
					   {
					      SET_BIT(PORTC, (pinIndex-PORTS_RANGE));
    1314:	a5 e3       	ldi	r26, 0x35	; 53
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e5 e3       	ldi	r30, 0x35	; 53
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9c 01       	movw	r18, r24
    1328:	28 50       	subi	r18, 0x08	; 8
    132a:	30 40       	sbci	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_voidSetPin+0xe0>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_voidSetPin+0xdc>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	86 c0       	rjmp	.+268    	; 0x144e <DIO_voidSetPin+0x1f6>
					   }
					   else if(pinVal == LOW)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <DIO_voidSetPin+0xf2>
    1348:	82 c0       	rjmp	.+260    	; 0x144e <DIO_voidSetPin+0x1f6>
					   {
						  CLEAR_BIT(PORTC, (pinIndex-PORTS_RANGE));
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9c 01       	movw	r18, r24
    135e:	28 50       	subi	r18, 0x08	; 8
    1360:	30 40       	sbci	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_voidSetPin+0x116>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_voidSetPin+0x112>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	6a c0       	rjmp	.+212    	; 0x144e <DIO_voidSetPin+0x1f6>
					   {
						  //Error on LCD
					   }
					   break;

		case 16 ... 23: if(pinVal == HIGH)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	b9 f4       	brne	.+46     	; 0x13ae <DIO_voidSetPin+0x156>
					    {
						  SET_BIT(PORTB, (pinIndex-(2*PORTS_RANGE)));
    1380:	a8 e3       	ldi	r26, 0x38	; 56
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9c 01       	movw	r18, r24
    1394:	20 51       	subi	r18, 0x10	; 16
    1396:	30 40       	sbci	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_voidSetPin+0x14c>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_voidSetPin+0x148>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	50 c0       	rjmp	.+160    	; 0x144e <DIO_voidSetPin+0x1f6>
					    }
					    else if(pinVal == LOW)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <DIO_voidSetPin+0x15e>
    13b4:	4c c0       	rjmp	.+152    	; 0x144e <DIO_voidSetPin+0x1f6>
					    {
					      CLEAR_BIT(PORTB, (pinIndex-(2*PORTS_RANGE)));
    13b6:	a8 e3       	ldi	r26, 0x38	; 56
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9c 01       	movw	r18, r24
    13ca:	20 51       	subi	r18, 0x10	; 16
    13cc:	30 40       	sbci	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_voidSetPin+0x182>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_voidSetPin+0x17e>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	34 c0       	rjmp	.+104    	; 0x144e <DIO_voidSetPin+0x1f6>
					    {
						  //Error on LCD
					    }
						break;

		case 24 ... 31: if(pinVal == HIGH)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	b9 f4       	brne	.+46     	; 0x141a <DIO_voidSetPin+0x1c2>
					    {
					      SET_BIT(PORTA, (pinIndex-(3*PORTS_RANGE)));
    13ec:	ab e3       	ldi	r26, 0x3B	; 59
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e3       	ldi	r30, 0x3B	; 59
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 01       	movw	r18, r24
    1400:	28 51       	subi	r18, 0x18	; 24
    1402:	30 40       	sbci	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_voidSetPin+0x1b8>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_voidSetPin+0x1b4>
    1414:	84 2b       	or	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	1a c0       	rjmp	.+52     	; 0x144e <DIO_voidSetPin+0x1f6>
					    }
					    else if(pinVal == LOW)
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 23       	and	r24, r24
    141e:	b9 f4       	brne	.+46     	; 0x144e <DIO_voidSetPin+0x1f6>
					    {
					      CLEAR_BIT(PORTA, (pinIndex-(3*PORTS_RANGE)));
    1420:	ab e3       	ldi	r26, 0x3B	; 59
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9c 01       	movw	r18, r24
    1434:	28 51       	subi	r18, 0x18	; 24
    1436:	30 40       	sbci	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_voidSetPin+0x1ec>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_voidSetPin+0x1e8>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
					    {
						  //Error on LCD
					    }
						break;
		}
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_getPortVal>:

u8 DIO_getPortVal(H_PORTS port)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_getPortVal+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_getPortVal+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	8a 83       	std	Y+2, r24	; 0x02
	u8 pinVal = 0;
    146a:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <DIO_getPortVal+0x58>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <DIO_getPortVal+0x38>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <DIO_getPortVal+0x4e>
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <DIO_getPortVal+0x74>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <DIO_getPortVal+0x62>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <DIO_getPortVal+0x6c>
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <DIO_getPortVal+0x74>
	{
		case H_PORTA: pinVal = PINA;
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <DIO_getPortVal+0x74>
					  break;

		case H_PORTB: pinVal = PINB;
    14b4:	e6 e3       	ldi	r30, 0x36	; 54
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <DIO_getPortVal+0x74>
					  break;

		case H_PORTC: pinVal = PINC;
    14be:	e3 e3       	ldi	r30, 0x33	; 51
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <DIO_getPortVal+0x74>
					  break;

		case H_PORTD: pinVal = PIND;
    14c8:	e0 e3       	ldi	r30, 0x30	; 48
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	89 83       	std	Y+1, r24	; 0x01
					  break;
	}
	return pinVal;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <DIO_getPinVal>:

u8 DIO_getPinVal(H_PINS pinIndex)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_getPinVal+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_getPinVal+0x8>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 pinVal = 0;
    14ee:	19 82       	std	Y+1, r1	; 0x01
    switch(pinIndex)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3c 83       	std	Y+4, r19	; 0x04
    14f8:	2b 83       	std	Y+3, r18	; 0x03
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	40 31       	cpi	r20, 0x10	; 16
    1500:	51 05       	cpc	r21, r1
    1502:	5c f4       	brge	.+22     	; 0x151a <DIO_getPinVal+0x3a>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	91 05       	cpc	r25, r1
    150c:	8c f5       	brge	.+98     	; 0x1570 <DIO_getPinVal+0x90>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	33 23       	and	r19, r19
    1514:	0c f4       	brge	.+2      	; 0x1518 <DIO_getPinVal+0x38>
    1516:	91 c0       	rjmp	.+290    	; 0x163a <DIO_getPinVal+0x15a>
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <DIO_getPinVal+0x54>
    151a:	4b 81       	ldd	r20, Y+3	; 0x03
    151c:	5c 81       	ldd	r21, Y+4	; 0x04
    151e:	48 31       	cpi	r20, 0x18	; 24
    1520:	51 05       	cpc	r21, r1
    1522:	0c f4       	brge	.+2      	; 0x1526 <DIO_getPinVal+0x46>
    1524:	47 c0       	rjmp	.+142    	; 0x15b4 <DIO_getPinVal+0xd4>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	80 32       	cpi	r24, 0x20	; 32
    152c:	91 05       	cpc	r25, r1
    152e:	0c f0       	brlt	.+2      	; 0x1532 <DIO_getPinVal+0x52>
    1530:	84 c0       	rjmp	.+264    	; 0x163a <DIO_getPinVal+0x15a>
    1532:	62 c0       	rjmp	.+196    	; 0x15f8 <DIO_getPinVal+0x118>
	{
    	case 0 ... 7: pinVal = GET_BIT(PIND, pinIndex);
    1534:	e0 e3       	ldi	r30, 0x30	; 48
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_getPinVal+0x6e>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	2a 95       	dec	r18
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_getPinVal+0x6a>
    1552:	9a 01       	movw	r18, r20
    1554:	28 23       	and	r18, r24
    1556:	39 23       	and	r19, r25
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_getPinVal+0x86>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_getPinVal+0x82>
    156a:	ca 01       	movw	r24, r20
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	65 c0       	rjmp	.+202    	; 0x163a <DIO_getPinVal+0x15a>
    				  break;

    	case 8 ... 15: pinVal = GET_BIT(PINC, (pinIndex-PORTS_RANGE));
    1570:	e3 e3       	ldi	r30, 0x33	; 51
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 01       	movw	r18, r24
    1582:	28 50       	subi	r18, 0x08	; 8
    1584:	30 40       	sbci	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_getPinVal+0xb0>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	2a 95       	dec	r18
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_getPinVal+0xac>
    1594:	9a 01       	movw	r18, r20
    1596:	28 23       	and	r18, r24
    1598:	39 23       	and	r19, r25
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	08 97       	sbiw	r24, 0x08	; 8
    15a2:	a9 01       	movw	r20, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_getPinVal+0xca>
    15a6:	55 95       	asr	r21
    15a8:	47 95       	ror	r20
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_getPinVal+0xc6>
    15ae:	ca 01       	movw	r24, r20
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	43 c0       	rjmp	.+134    	; 0x163a <DIO_getPinVal+0x15a>
    				   break;

    	case 16 ... 23: pinVal = GET_BIT(PINB, (pinIndex-(2*PORTS_RANGE)));
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 01       	movw	r18, r24
    15c6:	20 51       	subi	r18, 0x10	; 16
    15c8:	30 40       	sbci	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_getPinVal+0xf4>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_getPinVal+0xf0>
    15d8:	9a 01       	movw	r18, r20
    15da:	28 23       	and	r18, r24
    15dc:	39 23       	and	r19, r25
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	40 97       	sbiw	r24, 0x10	; 16
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_getPinVal+0x10e>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_getPinVal+0x10a>
    15f2:	ca 01       	movw	r24, r20
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	21 c0       	rjmp	.+66     	; 0x163a <DIO_getPinVal+0x15a>
    			  	    break;

    	case 24 ... 31: pinVal = GET_BIT(PINA, (pinIndex-(3*PORTS_RANGE)));
    15f8:	e9 e3       	ldi	r30, 0x39	; 57
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c 01       	movw	r18, r24
    160a:	28 51       	subi	r18, 0x18	; 24
    160c:	30 40       	sbci	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_getPinVal+0x138>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	2a 95       	dec	r18
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_getPinVal+0x134>
    161c:	9a 01       	movw	r18, r20
    161e:	28 23       	and	r18, r24
    1620:	39 23       	and	r19, r25
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	48 97       	sbiw	r24, 0x18	; 24
    162a:	a9 01       	movw	r20, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_getPinVal+0x152>
    162e:	55 95       	asr	r21
    1630:	47 95       	ror	r20
    1632:	8a 95       	dec	r24
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_getPinVal+0x14e>
    1636:	ca 01       	movw	r24, r20
    1638:	89 83       	std	Y+1, r24	; 0x01
    				    break;
	}
    return pinVal;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <Keypad_Intialize>:
#include "string.h"
#include <stdlib.h>
#include <util/delay.h>

void Keypad_Intialize()
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	/*Set Keypad COLUMNS as Output to put the LOW(0) and HIGH(1) signal*/
	DIO_voidSetDDR(KEYPAD_COLUMN_0, HIGH);
    1652:	89 e1       	ldi	r24, 0x19	; 25
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_COLUMN_1, HIGH);
    165a:	8a e1       	ldi	r24, 0x1A	; 26
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_COLUMN_2, HIGH);
    1662:	8b e1       	ldi	r24, 0x1B	; 27
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>

	/*Set Keypad ROWS as Input to detect The LOW(0) signal*/
	DIO_voidSetDDR(KEYPAD_ROW_0, LOW);
    166a:	8c e1       	ldi	r24, 0x1C	; 28
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_1, LOW);
    1672:	8d e1       	ldi	r24, 0x1D	; 29
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_2, LOW);
    167a:	8e e1       	ldi	r24, 0x1E	; 30
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_3, LOW);
    1682:	8f e1       	ldi	r24, 0x1F	; 31
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>

	//Enable Pull UP Resistance
	DIO_voidSetPort(H_PORTA, KEYPAD_PULL_UP_ENABLE_MSK);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	60 ef       	ldi	r22, 0xF0	; 240
    168e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_voidSetPort>
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <Keypad_GetKeyPressed>:

s8 Keypad_GetKeyPressed()
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2f 97       	sbiw	r28, 0x0f	; 15
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
	u8 columnCnt = 0;
    16ac:	1a 82       	std	Y+2, r1	; 0x02
	u8 rowCnt = 0;
    16ae:	19 82       	std	Y+1, r1	; 0x01
	for(columnCnt = KEYPAD_COLUMN_0; columnCnt <= KEYPAD_COLUMN_2; columnCnt++)
    16b0:	89 e1       	ldi	r24, 0x19	; 25
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	e4 c0       	rjmp	.+456    	; 0x187e <Keypad_GetKeyPressed+0x1e6>
	{
		switch(columnCnt)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3f 87       	std	Y+15, r19	; 0x0f
    16be:	2e 87       	std	Y+14, r18	; 0x0e
    16c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c4:	8a 31       	cpi	r24, 0x1A	; 26
    16c6:	91 05       	cpc	r25, r1
    16c8:	b9 f0       	breq	.+46     	; 0x16f8 <Keypad_GetKeyPressed+0x60>
    16ca:	2e 85       	ldd	r18, Y+14	; 0x0e
    16cc:	3f 85       	ldd	r19, Y+15	; 0x0f
    16ce:	2b 31       	cpi	r18, 0x1B	; 27
    16d0:	31 05       	cpc	r19, r1
    16d2:	f9 f0       	breq	.+62     	; 0x1712 <Keypad_GetKeyPressed+0x7a>
    16d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    16d8:	89 31       	cpi	r24, 0x19	; 25
    16da:	91 05       	cpc	r25, r1
    16dc:	31 f5       	brne	.+76     	; 0x172a <Keypad_GetKeyPressed+0x92>
		{
			case KEYPAD_COLUMN_0:
				DIO_voidSetPin(KEYPAD_COLUMN_0, LOW);
    16de:	89 e1       	ldi	r24, 0x19	; 25
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
    16e6:	8a e1       	ldi	r24, 0x1A	; 26
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, HIGH);
    16ee:	8b e1       	ldi	r24, 0x1B	; 27
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    16f6:	19 c0       	rjmp	.+50     	; 0x172a <Keypad_GetKeyPressed+0x92>
				break;

			case KEYPAD_COLUMN_1:
				DIO_voidSetPin(KEYPAD_COLUMN_0, HIGH);
    16f8:	89 e1       	ldi	r24, 0x19	; 25
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, LOW);
    1700:	8a e1       	ldi	r24, 0x1A	; 26
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, HIGH);
    1708:	8b e1       	ldi	r24, 0x1B	; 27
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1710:	0c c0       	rjmp	.+24     	; 0x172a <Keypad_GetKeyPressed+0x92>
				break;

			case KEYPAD_COLUMN_2:
				DIO_voidSetPin(KEYPAD_COLUMN_0, HIGH);
    1712:	89 e1       	ldi	r24, 0x19	; 25
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
    171a:	8a e1       	ldi	r24, 0x1A	; 26
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, LOW);
    1722:	8b e1       	ldi	r24, 0x1B	; 27
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
				break;
		}//end of switch

		for(rowCnt = KEYPAD_ROW_0; rowCnt <= KEYPAD_ROW_3; rowCnt++)
    172a:	8c e1       	ldi	r24, 0x1C	; 28
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	a0 c0       	rjmp	.+320    	; 0x1870 <Keypad_GetKeyPressed+0x1d8>
		{
			if(DIO_getPinVal(rowCnt) == LOW)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_getPinVal>
    1736:	88 23       	and	r24, r24
    1738:	09 f0       	breq	.+2      	; 0x173c <Keypad_GetKeyPressed+0xa4>
    173a:	97 c0       	rjmp	.+302    	; 0x186a <Keypad_GetKeyPressed+0x1d2>
			{
				switch(rowCnt)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3d 87       	std	Y+13, r19	; 0x0d
    1744:	2c 87       	std	Y+12, r18	; 0x0c
    1746:	8c 85       	ldd	r24, Y+12	; 0x0c
    1748:	9d 85       	ldd	r25, Y+13	; 0x0d
    174a:	8d 31       	cpi	r24, 0x1D	; 29
    174c:	91 05       	cpc	r25, r1
    174e:	a9 f1       	breq	.+106    	; 0x17ba <Keypad_GetKeyPressed+0x122>
    1750:	2c 85       	ldd	r18, Y+12	; 0x0c
    1752:	3d 85       	ldd	r19, Y+13	; 0x0d
    1754:	2e 31       	cpi	r18, 0x1E	; 30
    1756:	31 05       	cpc	r19, r1
    1758:	34 f4       	brge	.+12     	; 0x1766 <Keypad_GetKeyPressed+0xce>
    175a:	8c 85       	ldd	r24, Y+12	; 0x0c
    175c:	9d 85       	ldd	r25, Y+13	; 0x0d
    175e:	8c 31       	cpi	r24, 0x1C	; 28
    1760:	91 05       	cpc	r25, r1
    1762:	71 f0       	breq	.+28     	; 0x1780 <Keypad_GetKeyPressed+0xe8>
    1764:	82 c0       	rjmp	.+260    	; 0x186a <Keypad_GetKeyPressed+0x1d2>
    1766:	2c 85       	ldd	r18, Y+12	; 0x0c
    1768:	3d 85       	ldd	r19, Y+13	; 0x0d
    176a:	2e 31       	cpi	r18, 0x1E	; 30
    176c:	31 05       	cpc	r19, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <Keypad_GetKeyPressed+0xda>
    1770:	42 c0       	rjmp	.+132    	; 0x17f6 <Keypad_GetKeyPressed+0x15e>
    1772:	8c 85       	ldd	r24, Y+12	; 0x0c
    1774:	9d 85       	ldd	r25, Y+13	; 0x0d
    1776:	8f 31       	cpi	r24, 0x1F	; 31
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <Keypad_GetKeyPressed+0xe6>
    177c:	59 c0       	rjmp	.+178    	; 0x1830 <Keypad_GetKeyPressed+0x198>
    177e:	75 c0       	rjmp	.+234    	; 0x186a <Keypad_GetKeyPressed+0x1d2>
				{
					case KEYPAD_ROW_0:
						switch(columnCnt)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3b 87       	std	Y+11, r19	; 0x0b
    1788:	2a 87       	std	Y+10, r18	; 0x0a
    178a:	8a 85       	ldd	r24, Y+10	; 0x0a
    178c:	9b 85       	ldd	r25, Y+11	; 0x0b
    178e:	8a 31       	cpi	r24, 0x1A	; 26
    1790:	91 05       	cpc	r25, r1
    1792:	71 f0       	breq	.+28     	; 0x17b0 <Keypad_GetKeyPressed+0x118>
    1794:	2a 85       	ldd	r18, Y+10	; 0x0a
    1796:	3b 85       	ldd	r19, Y+11	; 0x0b
    1798:	2b 31       	cpi	r18, 0x1B	; 27
    179a:	31 05       	cpc	r19, r1
    179c:	59 f0       	breq	.+22     	; 0x17b4 <Keypad_GetKeyPressed+0x11c>
    179e:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a2:	89 31       	cpi	r24, 0x19	; 25
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f0       	breq	.+2      	; 0x17aa <Keypad_GetKeyPressed+0x112>
    17a8:	60 c0       	rjmp	.+192    	; 0x186a <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 35; //ASCII Of #
    17aa:	93 e2       	ldi	r25, 0x23	; 35
    17ac:	99 87       	std	Y+9, r25	; 0x09
    17ae:	6d c0       	rjmp	.+218    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_1: return 0;
    17b0:	19 86       	std	Y+9, r1	; 0x09
    17b2:	6b c0       	rjmp	.+214    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_2: return 42; //ASCII Of *
    17b4:	2a e2       	ldi	r18, 0x2A	; 42
    17b6:	29 87       	std	Y+9, r18	; 0x09
    17b8:	68 c0       	rjmp	.+208    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
						}
						break;
					case KEYPAD_ROW_1:
						switch(columnCnt)
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	38 87       	std	Y+8, r19	; 0x08
    17c2:	2f 83       	std	Y+7, r18	; 0x07
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	8a 31       	cpi	r24, 0x1A	; 26
    17ca:	91 05       	cpc	r25, r1
    17cc:	71 f0       	breq	.+28     	; 0x17ea <Keypad_GetKeyPressed+0x152>
    17ce:	2f 81       	ldd	r18, Y+7	; 0x07
    17d0:	38 85       	ldd	r19, Y+8	; 0x08
    17d2:	2b 31       	cpi	r18, 0x1B	; 27
    17d4:	31 05       	cpc	r19, r1
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <Keypad_GetKeyPressed+0x158>
    17d8:	8f 81       	ldd	r24, Y+7	; 0x07
    17da:	98 85       	ldd	r25, Y+8	; 0x08
    17dc:	89 31       	cpi	r24, 0x19	; 25
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <Keypad_GetKeyPressed+0x14c>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 9;
    17e4:	99 e0       	ldi	r25, 0x09	; 9
    17e6:	99 87       	std	Y+9, r25	; 0x09
    17e8:	50 c0       	rjmp	.+160    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_1: return 8;
    17ea:	28 e0       	ldi	r18, 0x08	; 8
    17ec:	29 87       	std	Y+9, r18	; 0x09
    17ee:	4d c0       	rjmp	.+154    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_2: return 7;
    17f0:	37 e0       	ldi	r19, 0x07	; 7
    17f2:	39 87       	std	Y+9, r19	; 0x09
    17f4:	4a c0       	rjmp	.+148    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
						}
						break;
					case KEYPAD_ROW_2:
						switch(columnCnt)
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	3e 83       	std	Y+6, r19	; 0x06
    17fe:	2d 83       	std	Y+5, r18	; 0x05
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	8a 31       	cpi	r24, 0x1A	; 26
    1806:	91 05       	cpc	r25, r1
    1808:	69 f0       	breq	.+26     	; 0x1824 <Keypad_GetKeyPressed+0x18c>
    180a:	2d 81       	ldd	r18, Y+5	; 0x05
    180c:	3e 81       	ldd	r19, Y+6	; 0x06
    180e:	2b 31       	cpi	r18, 0x1B	; 27
    1810:	31 05       	cpc	r19, r1
    1812:	59 f0       	breq	.+22     	; 0x182a <Keypad_GetKeyPressed+0x192>
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	89 31       	cpi	r24, 0x19	; 25
    181a:	91 05       	cpc	r25, r1
    181c:	31 f5       	brne	.+76     	; 0x186a <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 6;
    181e:	96 e0       	ldi	r25, 0x06	; 6
    1820:	99 87       	std	Y+9, r25	; 0x09
    1822:	33 c0       	rjmp	.+102    	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_1: return 5;
    1824:	25 e0       	ldi	r18, 0x05	; 5
    1826:	29 87       	std	Y+9, r18	; 0x09
    1828:	30 c0       	rjmp	.+96     	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_2: return 4;
    182a:	34 e0       	ldi	r19, 0x04	; 4
    182c:	39 87       	std	Y+9, r19	; 0x09
    182e:	2d c0       	rjmp	.+90     	; 0x188a <Keypad_GetKeyPressed+0x1f2>
						}
						break;
					case KEYPAD_ROW_3:
						switch(columnCnt)
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3c 83       	std	Y+4, r19	; 0x04
    1838:	2b 83       	std	Y+3, r18	; 0x03
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	8a 31       	cpi	r24, 0x1A	; 26
    1840:	91 05       	cpc	r25, r1
    1842:	69 f0       	breq	.+26     	; 0x185e <Keypad_GetKeyPressed+0x1c6>
    1844:	2b 81       	ldd	r18, Y+3	; 0x03
    1846:	3c 81       	ldd	r19, Y+4	; 0x04
    1848:	2b 31       	cpi	r18, 0x1B	; 27
    184a:	31 05       	cpc	r19, r1
    184c:	59 f0       	breq	.+22     	; 0x1864 <Keypad_GetKeyPressed+0x1cc>
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	89 31       	cpi	r24, 0x19	; 25
    1854:	91 05       	cpc	r25, r1
    1856:	49 f4       	brne	.+18     	; 0x186a <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 3;
    1858:	93 e0       	ldi	r25, 0x03	; 3
    185a:	99 87       	std	Y+9, r25	; 0x09
    185c:	16 c0       	rjmp	.+44     	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_1: return 2;
    185e:	22 e0       	ldi	r18, 0x02	; 2
    1860:	29 87       	std	Y+9, r18	; 0x09
    1862:	13 c0       	rjmp	.+38     	; 0x188a <Keypad_GetKeyPressed+0x1f2>
							case KEYPAD_COLUMN_2: return 1;
    1864:	31 e0       	ldi	r19, 0x01	; 1
    1866:	39 87       	std	Y+9, r19	; 0x09
    1868:	10 c0       	rjmp	.+32     	; 0x188a <Keypad_GetKeyPressed+0x1f2>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
				DIO_voidSetPin(KEYPAD_COLUMN_2, LOW);
				break;
		}//end of switch

		for(rowCnt = KEYPAD_ROW_0; rowCnt <= KEYPAD_ROW_3; rowCnt++)
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	80 32       	cpi	r24, 0x20	; 32
    1874:	08 f4       	brcc	.+2      	; 0x1878 <Keypad_GetKeyPressed+0x1e0>
    1876:	5c cf       	rjmp	.-328    	; 0x1730 <Keypad_GetKeyPressed+0x98>

s8 Keypad_GetKeyPressed()
{
	u8 columnCnt = 0;
	u8 rowCnt = 0;
	for(columnCnt = KEYPAD_COLUMN_0; columnCnt <= KEYPAD_COLUMN_2; columnCnt++)
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	8c 31       	cpi	r24, 0x1C	; 28
    1882:	08 f4       	brcc	.+2      	; 0x1886 <Keypad_GetKeyPressed+0x1ee>
    1884:	18 cf       	rjmp	.-464    	; 0x16b6 <Keypad_GetKeyPressed+0x1e>
				}//end of switch

			}//end of if statement
		}//end of second for loop
	}//end of 1st for loop
	return -1;//No Key Pressed
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	89 87       	std	Y+9, r24	; 0x09
    188a:	89 85       	ldd	r24, Y+9	; 0x09
}
    188c:	2f 96       	adiw	r28, 0x0f	; 15
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <Keypad_GetKeyPressedStr>:

void Keypad_GetKeyPressedStr(char *strPtr)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <Keypad_GetKeyPressedStr+0x6>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
	if(Keypad_GetKeyPressed() > -1)
    18ac:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    18b0:	88 23       	and	r24, r24
    18b2:	f4 f0       	brlt	.+60     	; 0x18f0 <Keypad_GetKeyPressedStr+0x52>
	{
		if(Keypad_GetKeyPressed() == 35)
    18b4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    18b8:	83 32       	cpi	r24, 0x23	; 35
    18ba:	29 f4       	brne	.+10     	; 0x18c6 <Keypad_GetKeyPressedStr+0x28>
		{
			strPtr = "*";
    18bc:	80 e6       	ldi	r24, 0x60	; 96
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	15 c0       	rjmp	.+42     	; 0x18f0 <Keypad_GetKeyPressedStr+0x52>
		}
		else if(Keypad_GetKeyPressed() == 42)
    18c6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    18ca:	8a 32       	cpi	r24, 0x2A	; 42
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <Keypad_GetKeyPressedStr+0x3a>
		{
			strPtr = "#";
    18ce:	82 e6       	ldi	r24, 0x62	; 98
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	0c c0       	rjmp	.+24     	; 0x18f0 <Keypad_GetKeyPressedStr+0x52>
		}
		else
		{
			itoa(Keypad_GetKeyPressed(), strPtr, 10);
    18d8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    18dc:	99 27       	eor	r25, r25
    18de:	87 fd       	sbrc	r24, 7
    18e0:	90 95       	com	r25
    18e2:	29 81       	ldd	r18, Y+1	; 0x01
    18e4:	3a 81       	ldd	r19, Y+2	; 0x02
    18e6:	b9 01       	movw	r22, r18
    18e8:	4a e0       	ldi	r20, 0x0A	; 10
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	0e 94 38 15 	call	0x2a70	; 0x2a70 <itoa>
		}
	}
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <LCD_WritePin>:
 * RW -> READ = 1/ WRITE = 0
 * A/K Additional resist control strength of illumination
 * */

static void LCD_WritePin(u8 data)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	6d 97       	sbiw	r28, 0x1d	; 29
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 6));
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 7));

	#elif (LCD_MODE_PIN == LCD_MODE_4)
		//in mode 4 we need to send data on 2 pulses
		DIO_voidSetPin(LCD_D4, GET_BIT(data, 4));
    1910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	80 71       	andi	r24, 0x10	; 16
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	95 95       	asr	r25
    191c:	87 95       	ror	r24
    191e:	95 95       	asr	r25
    1920:	87 95       	ror	r24
    1922:	95 95       	asr	r25
    1924:	87 95       	ror	r24
    1926:	95 95       	asr	r25
    1928:	87 95       	ror	r24
    192a:	98 2f       	mov	r25, r24
    192c:	8e e0       	ldi	r24, 0x0E	; 14
    192e:	69 2f       	mov	r22, r25
    1930:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D5, GET_BIT(data, 5));
    1934:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	80 72       	andi	r24, 0x20	; 32
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	95 95       	asr	r25
    1948:	87 95       	ror	r24
    194a:	95 95       	asr	r25
    194c:	87 95       	ror	r24
    194e:	95 95       	asr	r25
    1950:	87 95       	ror	r24
    1952:	98 2f       	mov	r25, r24
    1954:	8d e0       	ldi	r24, 0x0D	; 13
    1956:	69 2f       	mov	r22, r25
    1958:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 6));
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	80 74       	andi	r24, 0x40	; 64
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	08 2e       	mov	r0, r24
    1968:	89 2f       	mov	r24, r25
    196a:	00 0c       	add	r0, r0
    196c:	88 1f       	adc	r24, r24
    196e:	99 0b       	sbc	r25, r25
    1970:	00 0c       	add	r0, r0
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	98 2f       	mov	r25, r24
    1978:	8c e0       	ldi	r24, 0x0C	; 12
    197a:	69 2f       	mov	r22, r25
    197c:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 7));
    1980:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1982:	98 2f       	mov	r25, r24
    1984:	99 1f       	adc	r25, r25
    1986:	99 27       	eor	r25, r25
    1988:	99 1f       	adc	r25, r25
    198a:	8b e0       	ldi	r24, 0x0B	; 11
    198c:	69 2f       	mov	r22, r25
    198e:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>

		/*First Pulse*/
		DIO_voidSetPin(LCD_E, HIGH);
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e8       	ldi	r26, 0x80	; 128
    19a0:	bf e3       	ldi	r27, 0x3F	; 63
    19a2:	89 8f       	std	Y+25, r24	; 0x19
    19a4:	9a 8f       	std	Y+26, r25	; 0x1a
    19a6:	ab 8f       	std	Y+27, r26	; 0x1b
    19a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a e7       	ldi	r20, 0x7A	; 122
    19b8:	55 e4       	ldi	r21, 0x45	; 69
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8d 8b       	std	Y+21, r24	; 0x15
    19c4:	9e 8b       	std	Y+22, r25	; 0x16
    19c6:	af 8b       	std	Y+23, r26	; 0x17
    19c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ca:	6d 89       	ldd	r22, Y+21	; 0x15
    19cc:	7e 89       	ldd	r23, Y+22	; 0x16
    19ce:	8f 89       	ldd	r24, Y+23	; 0x17
    19d0:	98 8d       	ldd	r25, Y+24	; 0x18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <LCD_WritePin+0xf2>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <LCD_WritePin+0x170>
	else if (__tmp > 65535)
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <LCD_WritePin+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	69 8d       	ldd	r22, Y+25	; 0x19
    1a06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <LCD_WritePin+0x152>
    1a2e:	80 e9       	ldi	r24, 0x90	; 144
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	9a 8b       	std	Y+18, r25	; 0x12
    1a34:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a36:	89 89       	ldd	r24, Y+17	; 0x11
    1a38:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_WritePin+0x140>
    1a3e:	9a 8b       	std	Y+18, r25	; 0x12
    1a40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8b 89       	ldd	r24, Y+19	; 0x13
    1a44:	9c 89       	ldd	r25, Y+20	; 0x14
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <LCD_WritePin+0x134>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <LCD_WritePin+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6d 89       	ldd	r22, Y+21	; 0x15
    1a58:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
    1a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a74:	98 89       	ldd	r25, Y+16	; 0x10
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_WritePin+0x17c>
    1a7a:	98 8b       	std	Y+16, r25	; 0x10
    1a7c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_voidSetPin(LCD_E, LOW);
    1a7e:	88 e0       	ldi	r24, 0x08	; 8
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>

		DIO_voidSetPin(LCD_D4, GET_BIT(data, 0));
    1a86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a88:	98 2f       	mov	r25, r24
    1a8a:	91 70       	andi	r25, 0x01	; 1
    1a8c:	8e e0       	ldi	r24, 0x0E	; 14
    1a8e:	69 2f       	mov	r22, r25
    1a90:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D5, GET_BIT(data, 1));
    1a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	82 70       	andi	r24, 0x02	; 2
    1a9c:	90 70       	andi	r25, 0x00	; 0
    1a9e:	95 95       	asr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	8d e0       	ldi	r24, 0x0D	; 13
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 2));
    1aac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	84 70       	andi	r24, 0x04	; 4
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	95 95       	asr	r25
    1ab8:	87 95       	ror	r24
    1aba:	95 95       	asr	r25
    1abc:	87 95       	ror	r24
    1abe:	98 2f       	mov	r25, r24
    1ac0:	8c e0       	ldi	r24, 0x0C	; 12
    1ac2:	69 2f       	mov	r22, r25
    1ac4:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 3));
    1ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	88 70       	andi	r24, 0x08	; 8
    1ad0:	90 70       	andi	r25, 0x00	; 0
    1ad2:	95 95       	asr	r25
    1ad4:	87 95       	ror	r24
    1ad6:	95 95       	asr	r25
    1ad8:	87 95       	ror	r24
    1ada:	95 95       	asr	r25
    1adc:	87 95       	ror	r24
    1ade:	98 2f       	mov	r25, r24
    1ae0:	8b e0       	ldi	r24, 0x0B	; 11
    1ae2:	69 2f       	mov	r22, r25
    1ae4:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>

	#else
		//ERROR
	#endif
	/*Second Pulse*/
	DIO_voidSetPin(LCD_E, HIGH);
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	8b 87       	std	Y+11, r24	; 0x0b
    1afa:	9c 87       	std	Y+12, r25	; 0x0c
    1afc:	ad 87       	std	Y+13, r26	; 0x0d
    1afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	55 e4       	ldi	r21, 0x45	; 69
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8f 83       	std	Y+7, r24	; 0x07
    1b1a:	98 87       	std	Y+8, r25	; 0x08
    1b1c:	a9 87       	std	Y+9, r26	; 0x09
    1b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_WritePin+0x248>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_WritePin+0x2c6>
	else if (__tmp > 65535)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_WritePin+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_WritePin+0x2a8>
    1b84:	80 e9       	ldi	r24, 0x90	; 144
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_WritePin+0x296>
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_WritePin+0x28a>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_WritePin+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_WritePin+0x2d2>
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPin(LCD_E, LOW);
    1bd4:	88 e0       	ldi	r24, 0x08	; 8
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
	/*square pulse*/
}
    1bdc:	6d 96       	adiw	r28, 0x1d	; 29
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <LCD_WriteCMD>:

static void LCD_WriteCMD(u8 CMD)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	0f 92       	push	r0
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS, LOW); //RS = 0 Write command
    1bfa:	8a e0       	ldi	r24, 0x0A	; 10
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, LOW);
    1c02:	89 e0       	ldi	r24, 0x09	; 9
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
	LCD_WritePin(CMD);
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <LCD_WritePin>
}
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <LCD_WriteData>:

static void LCD_WriteData(u8 data)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS, HIGH); //RS = 1 write data
    1c24:	8a e0       	ldi	r24, 0x0A	; 10
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, LOW);
    1c2c:	89 e0       	ldi	r24, 0x09	; 9
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
	LCD_WritePin(data);
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <LCD_WritePin>
}
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <LCD_Initialize>:

void LCD_Initialize()
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDDR(LCD_E, HIGH);
    1c56:	88 e0       	ldi	r24, 0x08	; 8
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(LCD_RS, HIGH);
    1c5e:	8a e0       	ldi	r24, 0x0A	; 10
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(LCD_RW, HIGH);
    1c66:	89 e0       	ldi	r24, 0x09	; 9
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D7, HIGH);

		LCD_WriteCMD(LCD_8_MODE_CMD);

	#elif(LCD_MODE_PIN == LCD_MODE_4)
		DIO_voidSetDDR(LCD_D4, HIGH);
    1c6e:	8e e0       	ldi	r24, 0x0E	; 14
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D5, HIGH);
    1c76:	8d e0       	ldi	r24, 0x0D	; 13
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D6, HIGH);
    1c7e:	8c e0       	ldi	r24, 0x0C	; 12
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D7, HIGH);
    1c86:	8b e0       	ldi	r24, 0x0B	; 11
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>

	/*to send data on 4 mode we need to write three addresses*/
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ1);
    1c8e:	83 e2       	ldi	r24, 0x23	; 35
    1c90:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ2);
    1c94:	82 e2       	ldi	r24, 0x22	; 34
    1c96:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ3);
    1c9a:	88 e2       	ldi	r24, 0x28	; 40
    1c9c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>

	#else
		//ERROR
	#endif
	LCD_WriteCMD(LCD_DISPLAY_CMD);
    1ca0:	8e e0       	ldi	r24, 0x0E	; 14
    1ca2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
	LCD_WriteCMD(LCD_CLEAR_CMD);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e4       	ldi	r26, 0x40	; 64
    1cb2:	b0 e4       	ldi	r27, 0x40	; 64
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	55 e4       	ldi	r21, 0x45	; 69
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_Initialize+0xbc>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_Initialize+0x13a>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_Initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_Initialize+0x11c>
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_Initialize+0x10a>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_Initialize+0xfe>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <LCD_Initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_Initialize+0x146>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1d90:	2e 96       	adiw	r28, 0x0e	; 14
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <LCD_Clear>:

void LCD_Clear()
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCMD(LCD_CLEAR_CMD);
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <LCD_Shift>:

void LCD_Shift(u8 columnShift, u8 rowShift)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <LCD_Shift+0x6>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	6a 83       	std	Y+2, r22	; 0x02
	LCD_WriteCMD(COLUMN_ZERO + columnShift + (ROW_ZERO * rowShift));
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	88 2f       	mov	r24, r24
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	00 24       	eor	r0, r0
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	07 94       	ror	r0
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	07 94       	ror	r0
    1dd8:	98 2f       	mov	r25, r24
    1dda:	80 2d       	mov	r24, r0
    1ddc:	98 2f       	mov	r25, r24
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	89 0f       	add	r24, r25
    1de2:	80 58       	subi	r24, 0x80	; 128
    1de4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <LCD_WriteCMD>
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_WriteString>:

void LCD_WriteString(u8 *str)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <LCD_WriteString+0x6>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
	u8 charCnt = 0;
    1e02:	19 82       	std	Y+1, r1	; 0x01
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_WriteString+0x32>
	while(str[charCnt] != '\0')
	{
		LCD_WriteData(str[charCnt++]);
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	fc 01       	movw	r30, r24
    1e12:	e2 0f       	add	r30, r18
    1e14:	f3 1f       	adc	r31, r19
    1e16:	90 81       	ld	r25, Z
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	89 2f       	mov	r24, r25
    1e20:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_WriteData>
}

void LCD_WriteString(u8 *str)
{
	u8 charCnt = 0;
	while(str[charCnt] != '\0')
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	88 23       	and	r24, r24
    1e38:	31 f7       	brne	.-52     	; 0x1e06 <LCD_WriteString+0x14>
	{
		LCD_WriteData(str[charCnt++]);
	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_WriteStringXY>:

void LCD_WriteStringXY(u8 *str, u8 columnShift, u8 rowShift)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LCD_WriteStringXY+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LCD_WriteStringXY+0x8>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	6b 83       	std	Y+3, r22	; 0x03
    1e58:	4c 83       	std	Y+4, r20	; 0x04
	LCD_Shift(columnShift, rowShift);
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	6c 81       	ldd	r22, Y+4	; 0x04
    1e5e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_Shift>
	LCD_WriteString(str);
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_WriteString>
}
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <LED_Initialize>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "LED.h"

void LED_Initialize()
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(LED_0, HIGH);
    1e80:	84 e0       	ldi	r24, 0x04	; 4
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(LED_1, HIGH);
    1e88:	85 e0       	ldi	r24, 0x05	; 5
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	DIO_voidSetDDR(LED_2, HIGH);
    1e90:	86 e0       	ldi	r24, 0x06	; 6
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
}
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <LED_ON>:

void LED_ON(u8 LED_Channel)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <LED_ON+0x6>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_Channel)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3b 83       	std	Y+3, r19	; 0x03
    1eb4:	2a 83       	std	Y+2, r18	; 0x02
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <LED_ON+0x3e>
    1ec0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ec2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	71 f0       	breq	.+28     	; 0x1ee6 <LED_ON+0x48>
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	71 f4       	brne	.+28     	; 0x1eee <LED_ON+0x50>
	{
		case LED_CHANNEL_0 :
			DIO_voidSetPin(LED_0, HIGH);
    1ed2:	84 e0       	ldi	r24, 0x04	; 4
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1eda:	09 c0       	rjmp	.+18     	; 0x1eee <LED_ON+0x50>
			break;
		case LED_CHANNEL_1 :
			DIO_voidSetPin(LED_1, HIGH);
    1edc:	85 e0       	ldi	r24, 0x05	; 5
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <LED_ON+0x50>
			break;
		case LED_CHANNEL_2 :
			DIO_voidSetPin(LED_2, HIGH);
    1ee6:	86 e0       	ldi	r24, 0x06	; 6
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
			break;
	}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <LED_OFF>:

void LED_OFF(u8 LED_Channel)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <LED_OFF+0x6>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_Channel)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3b 83       	std	Y+3, r19	; 0x03
    1f10:	2a 83       	std	Y+2, r18	; 0x02
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <LED_OFF+0x3e>
    1f1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	71 f0       	breq	.+28     	; 0x1f42 <LED_OFF+0x48>
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	71 f4       	brne	.+28     	; 0x1f4a <LED_OFF+0x50>
	{
		case LED_CHANNEL_0 :
			DIO_voidSetPin(LED_0, LOW);
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1f36:	09 c0       	rjmp	.+18     	; 0x1f4a <LED_OFF+0x50>
			break;
		case LED_CHANNEL_1 :
			DIO_voidSetPin(LED_1, LOW);
    1f38:	85 e0       	ldi	r24, 0x05	; 5
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <LED_OFF+0x50>
			break;
		case LED_CHANNEL_2 :
			DIO_voidSetPin(LED_2, LOW);
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
			break;
	}
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LED_Toggle>:

void LED_Toggle(u8 LED_Channel)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <LED_Toggle+0x6>
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <LED_Toggle+0x8>
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	8a 83       	std	Y+2, r24	; 0x02
	u8 LEDStatus = 0;
    1f64:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_Channel)
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3c 83       	std	Y+4, r19	; 0x04
    1f6e:	2b 83       	std	Y+3, r18	; 0x03
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	b1 f0       	breq	.+44     	; 0x1fa6 <LED_Toggle+0x50>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	f1 f0       	breq	.+60     	; 0x1fc0 <LED_Toggle+0x6a>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	31 f5       	brne	.+76     	; 0x1fd8 <LED_Toggle+0x82>
	{
		case LED_CHANNEL_0 :
			LEDStatus = DIO_getPinVal(LED_0);
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_getPinVal>
    1f92:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_0, (LEDStatus ^= 1));
    1f94:	99 81       	ldd	r25, Y+1	; 0x01
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	89 27       	eor	r24, r25
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	69 81       	ldd	r22, Y+1	; 0x01
    1fa0:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1fa4:	19 c0       	rjmp	.+50     	; 0x1fd8 <LED_Toggle+0x82>
			break;
		case LED_CHANNEL_1 :
			LEDStatus = DIO_getPinVal(LED_1);
    1fa6:	85 e0       	ldi	r24, 0x05	; 5
    1fa8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_getPinVal>
    1fac:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_1, (LEDStatus ^= 1));
    1fae:	99 81       	ldd	r25, Y+1	; 0x01
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	89 27       	eor	r24, r25
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	85 e0       	ldi	r24, 0x05	; 5
    1fb8:	69 81       	ldd	r22, Y+1	; 0x01
    1fba:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
    1fbe:	0c c0       	rjmp	.+24     	; 0x1fd8 <LED_Toggle+0x82>
			break;
		case LED_CHANNEL_2 :
			LEDStatus = DIO_getPinVal(LED_2);
    1fc0:	86 e0       	ldi	r24, 0x06	; 6
    1fc2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_getPinVal>
    1fc6:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_2, (LEDStatus ^= 1));
    1fc8:	99 81       	ldd	r25, Y+1	; 0x01
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 27       	eor	r24, r25
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
    1fd2:	69 81       	ldd	r22, Y+1	; 0x01
    1fd4:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_voidSetPin>
			break;
	}
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <SERVO_Initialize>:
#include "GIE.h"
#include "TIM.h"
#include "SERVO.h"

void SERVO_Initialize()
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	TIM_voidInitialize();
    1fee:	0e 94 8a 10 	call	0x2114	; 0x2114 <TIM_voidInitialize>
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <SERVO_ON>:

void SERVO_ON()
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	TIM_voidSetCompareValue(15);  //Open degree
    2000:	8f e0       	ldi	r24, 0x0F	; 15
    2002:	0e 94 05 11 	call	0x220a	; 0x220a <TIM_voidSetCompareValue>
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <SERVO_OFF>:

void SERVO_OFF()
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	TIM_voidSetCompareValue(200);  //Close degree
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	0e 94 05 11 	call	0x220a	; 0x220a <TIM_voidSetCompareValue>
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <TEMP_Initialize>:

static void TEMP_ISR(void);
static u8 FIRE_FLAG = LOW;

void TEMP_Initialize(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(LM35, LOW); //Set LM35 Input
    2028:	88 e1       	ldi	r24, 0x18	; 24
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
	ADC_Init();
    2030:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
	TIM_voidInitialize();
    2034:	0e 94 8a 10 	call	0x2114	; 0x2114 <TIM_voidInitialize>
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <TEMP_READ>:

u8 TEMP_READ(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
	return (((ADC_GetResult(0))*4.88f)/10);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	0e 94 2d 07 	call	0xe5a	; 0xe5a <ADC_GetResult>
    204c:	cc 01       	movw	r24, r24
    204e:	a0 e0       	ldi	r26, 0x00	; 0
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	26 ef       	ldi	r18, 0xF6	; 246
    2064:	38 e2       	ldi	r19, 0x28	; 40
    2066:	4c e9       	ldi	r20, 0x9C	; 156
    2068:	50 e4       	ldi	r21, 0x40	; 64
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <TEMP_STR_READ>:


void TEMP_STR_READ(char *strPtr)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <TEMP_STR_READ+0x6>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	itoa(TEMP_READ(), strPtr, 10);
    20a6:	0e 94 1f 10 	call	0x203e	; 0x203e <TEMP_READ>
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	29 81       	ldd	r18, Y+1	; 0x01
    20b0:	3a 81       	ldd	r19, Y+2	; 0x02
    20b2:	b9 01       	movw	r22, r18
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <itoa>
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <TEMP_EnableInterrupt>:

void TEMP_EnableInterrupt(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	TIM_voidEnableInterrupt();
    20ce:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <TIM_voidEnableInterrupt>
	//Check TEMP_READ every 1s in case over heat
	TIM_voidSetCallBack(TEMP_ISR);
    20d2:	80 e7       	ldi	r24, 0x70	; 112
    20d4:	90 e1       	ldi	r25, 0x10	; 16
    20d6:	0e 94 13 11 	call	0x2226	; 0x2226 <TIM_voidSetCallBack>
}
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <TEMP_ISR>:

static void TEMP_ISR(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	if(TEMP_READ() > 40)
    20e8:	0e 94 1f 10 	call	0x203e	; 0x203e <TEMP_READ>
    20ec:	89 32       	cpi	r24, 0x29	; 41
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <TEMP_ISR+0x18>
	{
		FIRE_FLAG = HIGH;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 40 02 	sts	0x0240, r24
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <TEMP_ISR+0x1c>
	}
	else
	{
		FIRE_FLAG = LOW;
    20f8:	10 92 40 02 	sts	0x0240, r1
	}
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <TEMP_GetFireFlag>:

u8 TEMP_GetFireFlag(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	return FIRE_FLAG;
    210a:	80 91 40 02 	lds	r24, 0x0240
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <TIM_voidInitialize>:

static PtrToFuncType TIM_CallBacKFunc;

/*Description: This function shall initialize the Timer peripheral*/
void TIM_voidInitialize()
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	TIFR |= TIFR_CLEAR_MSK;
    211c:	a8 e5       	ldi	r26, 0x58	; 88
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e8 e5       	ldi	r30, 0x58	; 88
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	83 60       	ori	r24, 0x03	; 3
    2128:	8c 93       	st	X, r24

	//Disable Interrupt
	TIMSK &= TIMSK_CLEAR_MSK;
    212a:	a9 e5       	ldi	r26, 0x59	; 89
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 e5       	ldi	r30, 0x59	; 89
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8c 7f       	andi	r24, 0xFC	; 252
    2136:	8c 93       	st	X, r24

	//Initialize Timer Register
	TCNT0 = TIM_INIT_VALUE;
    2138:	e2 e5       	ldi	r30, 0x52	; 82
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	10 82       	st	Z, r1

	//Clear CS00, CS01, CS02 Division Mode Bits
	TCCR0 &= TIM_DIV_CLEAR_MSK;
    213e:	a3 e5       	ldi	r26, 0x53	; 83
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e3 e5       	ldi	r30, 0x53	; 83
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	88 7f       	andi	r24, 0xF8	; 248
    214a:	8c 93       	st	X, r24
		case TIM_DIV_BY_8 :
			TCCR0 |= TIM_DIV_BY_8_MSK;
			break;

		case TIM_DIV_BY_64 :
			TCCR0 |= TIM_DIV_BY_64_MSK;
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	83 60       	ori	r24, 0x03	; 3
    2158:	8c 93       	st	X, r24
			break;

	}

	//Clear WGM01, WGM00 Timer Mode Bits
	TCCR0 &= TIM_MODE_CLEAR_MSK;
    215a:	a3 e5       	ldi	r26, 0x53	; 83
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 e5       	ldi	r30, 0x53	; 83
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	87 7b       	andi	r24, 0xB7	; 183
    2166:	8c 93       	st	X, r24
					break;
			}
			break;

		case TIM_MODE_FAST_PWM :
			TCCR0 |= TIM_MODE_FAST_PWM_MSK;
    2168:	a3 e5       	ldi	r26, 0x53	; 83
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e3 e5       	ldi	r30, 0x53	; 83
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	88 64       	ori	r24, 0x48	; 72
    2174:	8c 93       	st	X, r24
			OCR0 = INIT_COMPARE_VALUE;
    2176:	ec e5       	ldi	r30, 0x5C	; 92
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	8a ef       	ldi	r24, 0xFA	; 250
    217c:	80 83       	st	Z, r24

			//Clear COM01, COM00 OC Mode Bits
			TCCR0 &= OC_CLEAR_MSK;
    217e:	a3 e5       	ldi	r26, 0x53	; 83
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e3 e5       	ldi	r30, 0x53	; 83
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8f 7c       	andi	r24, 0xCF	; 207
    218a:	8c 93       	st	X, r24
				case OC_NON_INVERTING :
					TCCR0 |= OC_NON_INVERTING_MSK;
					DIO_voidSetDDR(PIN_19, HIGH);
					break;
				case OC_INVERTING :
					TCCR0 |= OC_INVERTING_MSK;
    218c:	a3 e5       	ldi	r26, 0x53	; 83
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e3 e5       	ldi	r30, 0x53	; 83
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	80 63       	ori	r24, 0x30	; 48
    2198:	8c 93       	st	X, r24
					DIO_voidSetDDR(PIN_19, HIGH);
    219a:	83 e1       	ldi	r24, 0x13	; 19
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <DIO_voidSetDDR>
					break;
			}
			break;
	}
}
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <TIM_voidEnableInterrupt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInterrupt()
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= TIMSK_CLEAR_MSK;
    21b0:	a9 e5       	ldi	r26, 0x59	; 89
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e9 e5       	ldi	r30, 0x59	; 89
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8c 7f       	andi	r24, 0xFC	; 252
    21bc:	8c 93       	st	X, r24
		case TIM_MODE_NORMAL :
			TIMSK |= TIMSK_OV_ENABLE_MSK;
			break;
		case TIM_MODE_CTC :
		case TIM_MODE_FAST_PWM :
			TIMSK |= TIMSK_OC_ENABLE_MSK;
    21be:	a9 e5       	ldi	r26, 0x59	; 89
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e9 e5       	ldi	r30, 0x59	; 89
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	8c 93       	st	X, r24
			break;
	}
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <TIM_voidDisableInterrupt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInterrupt()
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= TIMSK_CLEAR_MSK;
    21da:	a9 e5       	ldi	r26, 0x59	; 89
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e9 e5       	ldi	r30, 0x59	; 89
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8c 7f       	andi	r24, 0xFC	; 252
    21e6:	8c 93       	st	X, r24
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <TIM_voidInitTimerRegister>:

/*Description: initialize timer register*/
void TIM_voidInitTimerRegister(u8 startCnt)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = startCnt;
    21fa:	e2 e5       	ldi	r30, 0x52	; 82
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	80 83       	st	Z, r24
}
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <TIM_voidSetCompareValue>:

/*description function to set the compare register with certain value*/
void TIM_voidSetCompareValue(u8 compareVal)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	0f 92       	push	r0
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compareVal;
    2216:	ec e5       	ldi	r30, 0x5C	; 92
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	80 83       	st	Z, r24
}
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <TIM_voidSetCallBack>:

/*Description: set Timer callback function*/
void TIM_voidSetCallBack(PtrToFuncType funcPtr)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <TIM_voidSetCallBack+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBacKFunc = funcPtr;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	90 93 42 02 	sts	0x0242, r25
    223c:	80 93 41 02 	sts	0x0241, r24
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <__vector_11>:

/*defining the interrupt handling function*/
TIMER0_OVF()
{
    224a:	1f 92       	push	r1
    224c:	0f 92       	push	r0
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	0f 92       	push	r0
    2252:	11 24       	eor	r1, r1
    2254:	2f 93       	push	r18
    2256:	3f 93       	push	r19
    2258:	4f 93       	push	r20
    225a:	5f 93       	push	r21
    225c:	6f 93       	push	r22
    225e:	7f 93       	push	r23
    2260:	8f 93       	push	r24
    2262:	9f 93       	push	r25
    2264:	af 93       	push	r26
    2266:	bf 93       	push	r27
    2268:	ef 93       	push	r30
    226a:	ff 93       	push	r31
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBacKFunc();
    2274:	e0 91 41 02 	lds	r30, 0x0241
    2278:	f0 91 42 02 	lds	r31, 0x0242
    227c:	09 95       	icall
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	ff 91       	pop	r31
    2284:	ef 91       	pop	r30
    2286:	bf 91       	pop	r27
    2288:	af 91       	pop	r26
    228a:	9f 91       	pop	r25
    228c:	8f 91       	pop	r24
    228e:	7f 91       	pop	r23
    2290:	6f 91       	pop	r22
    2292:	5f 91       	pop	r21
    2294:	4f 91       	pop	r20
    2296:	3f 91       	pop	r19
    2298:	2f 91       	pop	r18
    229a:	0f 90       	pop	r0
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	0f 90       	pop	r0
    22a0:	1f 90       	pop	r1
    22a2:	18 95       	reti

000022a4 <__vector_10>:

TIMER0_COMP()
{
    22a4:	1f 92       	push	r1
    22a6:	0f 92       	push	r0
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	0f 92       	push	r0
    22ac:	11 24       	eor	r1, r1
    22ae:	2f 93       	push	r18
    22b0:	3f 93       	push	r19
    22b2:	4f 93       	push	r20
    22b4:	5f 93       	push	r21
    22b6:	6f 93       	push	r22
    22b8:	7f 93       	push	r23
    22ba:	8f 93       	push	r24
    22bc:	9f 93       	push	r25
    22be:	af 93       	push	r26
    22c0:	bf 93       	push	r27
    22c2:	ef 93       	push	r30
    22c4:	ff 93       	push	r31
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBacKFunc();
    22ce:	e0 91 41 02 	lds	r30, 0x0241
    22d2:	f0 91 42 02 	lds	r31, 0x0242
    22d6:	09 95       	icall
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	ff 91       	pop	r31
    22de:	ef 91       	pop	r30
    22e0:	bf 91       	pop	r27
    22e2:	af 91       	pop	r26
    22e4:	9f 91       	pop	r25
    22e6:	8f 91       	pop	r24
    22e8:	7f 91       	pop	r23
    22ea:	6f 91       	pop	r22
    22ec:	5f 91       	pop	r21
    22ee:	4f 91       	pop	r20
    22f0:	3f 91       	pop	r19
    22f2:	2f 91       	pop	r18
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	0f 90       	pop	r0
    22fa:	1f 90       	pop	r1
    22fc:	18 95       	reti

000022fe <UART_Initialize>:
#include "UART_REG.h"
#include "UART_CFG.h"
#include "UART.h"

void UART_Initialize(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	  UBRRL = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
    2306:	e9 e2       	ldi	r30, 0x29	; 41
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	87 e6       	ldi	r24, 0x67	; 103
    230c:	80 83       	st	Z, r24
	  UBRRH = (BAUD_PRESCALE >> 8);
    230e:	e0 e4       	ldi	r30, 0x40	; 64
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	10 82       	st	Z, r1

	  /* Load upper 8-bits into the high byte of the UBRR register Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR data sheet*/
	  // Enable receiver and transmitter and receive complete interrupt
	  UCSRB = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
    2314:	ea e2       	ldi	r30, 0x2A	; 42
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	88 e9       	ldi	r24, 0x98	; 152
    231a:	80 83       	st	Z, r24
}
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <UART_Write>:

void UART_Write(u8 data)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <UART_Write+0x6>
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA, UDRE));
    2330:	eb e2       	ldi	r30, 0x2B	; 43
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
	UDR = data;
    2336:	ec e2       	ldi	r30, 0x2C	; 44
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	80 83       	st	Z, r24
	while(!GET_BIT(UCSRA, TXC));
    233e:	eb e2       	ldi	r30, 0x2B	; 43
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <UART_Read>:

/*receive a character through UART*/
u8 UART_Read()
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <UART_Read+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	while(!GET_BIT(UCSRA, RXC));
    235a:	eb e2       	ldi	r30, 0x2B	; 43
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
	data = UDR;
    2360:	ec e2       	ldi	r30, 0x2C	; 44
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	89 83       	std	Y+1, r24	; 0x01
	return data;
    2368:	89 81       	ldd	r24, Y+1	; 0x01
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <main>:
void checkFireFlag(void);
void delay(u16 duration);
void keypad_CopyKeyPressed(char *strPtr, u8 passwordSize);

int main()
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	intializeDrivers();
    237c:	0e 94 56 12 	call	0x24ac	; 0x24ac <intializeDrivers>
	closeAll();
    2380:	0e 94 f6 13 	call	0x27ec	; 0x27ec <closeAll>
	TEMP_EnableInterrupt();
    2384:	0e 94 63 10 	call	0x20c6	; 0x20c6 <TEMP_EnableInterrupt>
	LCD_WriteStringXY((u8*)"ENTER PASSWORD", 0, 0);
    2388:	84 e6       	ldi	r24, 0x64	; 100
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
	checkFireFlag();
    2394:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
	delay(1000);
    2398:	88 ee       	ldi	r24, 0xE8	; 232
    239a:	93 e0       	ldi	r25, 0x03	; 3
    239c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
	while(1)
	{
		checkFireFlag();
    23a0:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
		if(checkPassword())
    23a4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <checkPassword>
    23a8:	88 23       	and	r24, r24
    23aa:	09 f4       	brne	.+2      	; 0x23ae <main+0x3a>
    23ac:	6c c0       	rjmp	.+216    	; 0x2486 <main+0x112>
		{
			LCD_Clear();
    23ae:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"WELCOME HOME", 0, 0);
    23b2:	83 e7       	ldi	r24, 0x73	; 115
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			checkFireFlag();
    23be:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(1000);
    23c2:	88 ee       	ldi	r24, 0xE8	; 232
    23c4:	93 e0       	ldi	r25, 0x03	; 3
    23c6:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>

			LCD_Clear();
    23ca:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"Opening DOOR", 0, 0);
    23ce:	80 e8       	ldi	r24, 0x80	; 128
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			DOOR_OPEN();
    23da:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <DOOR_OPEN>
			checkFireFlag();
    23de:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(3000);
    23e2:	88 eb       	ldi	r24, 0xB8	; 184
    23e4:	9b e0       	ldi	r25, 0x0B	; 11
    23e6:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>

			LCD_Clear();
    23ea:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"Closing DOOR", 0, 0);
    23ee:	8d e8       	ldi	r24, 0x8D	; 141
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			DOOR_CLOSE();
    23fa:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DOOR_CLOSE>
			checkFireFlag();
    23fe:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(500);
    2402:	84 ef       	ldi	r24, 0xF4	; 244
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>


			LCD_Clear();
    240a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"Illuminate LEDs", 0, 0);
    240e:	8a e9       	ldi	r24, 0x9A	; 154
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			LED_ON(LED_CHANNEL_0);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
			checkFireFlag();
    2420:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(1000);
    2424:	88 ee       	ldi	r24, 0xE8	; 232
    2426:	93 e0       	ldi	r25, 0x03	; 3
    2428:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
			LED_ON(LED_CHANNEL_1);
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
			checkFireFlag();
    2432:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(1000);
    2436:	88 ee       	ldi	r24, 0xE8	; 232
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
			LED_ON(LED_CHANNEL_2);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
			checkFireFlag();
    2444:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(1000);
    2448:	88 ee       	ldi	r24, 0xE8	; 232
    244a:	93 e0       	ldi	r25, 0x03	; 3
    244c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>

			LCD_Clear();
    2450:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"Opening FAN", 0, 0);
    2454:	8a ea       	ldi	r24, 0xAA	; 170
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			FAN_OPEN();
    2460:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <FAN_OPEN>
			checkFireFlag();
    2464:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
			delay(1000);
    2468:	88 ee       	ldi	r24, 0xE8	; 232
    246a:	93 e0       	ldi	r25, 0x03	; 3
    246c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
			LCD_WriteStringXY((u8*)"Closing FAN", 0, 0);
    2470:	86 eb       	ldi	r24, 0xB6	; 182
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			FAN_CLOSE();
    247c:	0e 94 ed 13 	call	0x27da	; 0x27da <FAN_CLOSE>

			//LOOPING TO NOT ASK PASSWORD AGAIN
			while(1)
			{
				checkFireFlag();
    2480:	0e 94 0e 14 	call	0x281c	; 0x281c <checkFireFlag>
    2484:	fd cf       	rjmp	.-6      	; 0x2480 <main+0x10c>
			}
		}
		else
		{
			LCD_Clear();
    2486:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
			LCD_WriteStringXY((u8*)"WRONG PASSWORD", 0, 0);
    248a:	82 ec       	ldi	r24, 0xC2	; 194
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			LCD_WriteStringXY((u8*)"TRY AGAIN!", 0, 1);
    2496:	81 ed       	ldi	r24, 0xD1	; 209
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			delay(1000);
    24a2:	88 ee       	ldi	r24, 0xE8	; 232
    24a4:	93 e0       	ldi	r25, 0x03	; 3
    24a6:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
    24aa:	7a cf       	rjmp	.-268    	; 0x23a0 <main+0x2c>

000024ac <intializeDrivers>:
	}//end of 1st while

}

void intializeDrivers(void)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
	LED_Initialize();
    24b4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LED_Initialize>
	LCD_Initialize();
    24b8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_Initialize>
	UART_Initialize();
    24bc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <UART_Initialize>
	SERVO_Initialize();
    24c0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <SERVO_Initialize>
	BUZZER_Initialize();
    24c4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <BUZZER_Initialize>
	Keypad_Intialize();
    24c8:	0e 94 25 0b 	call	0x164a	; 0x164a <Keypad_Intialize>
	DC_MOTOR_Initialize();
    24cc:	0e 94 c8 07 	call	0xf90	; 0xf90 <DC_MOTOR_Initialize>
	TEMP_Initialize();
    24d0:	0e 94 10 10 	call	0x2020	; 0x2020 <TEMP_Initialize>
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <wirelessControl>:

void wirelessControl(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <wirelessControl+0x6>
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
	switch(UART_Read())
    24e4:	0e 94 a8 11 	call	0x2350	; 0x2350 <UART_Read>
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	3a 83       	std	Y+2, r19	; 0x02
    24ee:	29 83       	std	Y+1, r18	; 0x01
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	87 30       	cpi	r24, 0x07	; 7
    24f6:	91 05       	cpc	r25, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <wirelessControl+0x22>
    24fa:	66 c0       	rjmp	.+204    	; 0x25c8 <wirelessControl+0xee>
    24fc:	29 81       	ldd	r18, Y+1	; 0x01
    24fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2500:	28 30       	cpi	r18, 0x08	; 8
    2502:	31 05       	cpc	r19, r1
    2504:	1c f5       	brge	.+70     	; 0x254c <wirelessControl+0x72>
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	83 30       	cpi	r24, 0x03	; 3
    250c:	91 05       	cpc	r25, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <wirelessControl+0x38>
    2510:	4b c0       	rjmp	.+150    	; 0x25a8 <wirelessControl+0xce>
    2512:	29 81       	ldd	r18, Y+1	; 0x01
    2514:	3a 81       	ldd	r19, Y+2	; 0x02
    2516:	24 30       	cpi	r18, 0x04	; 4
    2518:	31 05       	cpc	r19, r1
    251a:	5c f4       	brge	.+22     	; 0x2532 <wirelessControl+0x58>
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	91 05       	cpc	r25, r1
    2524:	c9 f1       	breq	.+114    	; 0x2598 <wirelessControl+0xbe>
    2526:	29 81       	ldd	r18, Y+1	; 0x01
    2528:	3a 81       	ldd	r19, Y+2	; 0x02
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	c1 f1       	breq	.+112    	; 0x25a0 <wirelessControl+0xc6>
    2530:	64 c0       	rjmp	.+200    	; 0x25fa <wirelessControl+0x120>
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	85 30       	cpi	r24, 0x05	; 5
    2538:	91 05       	cpc	r25, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <wirelessControl+0x64>
    253c:	3d c0       	rjmp	.+122    	; 0x25b8 <wirelessControl+0xde>
    253e:	29 81       	ldd	r18, Y+1	; 0x01
    2540:	3a 81       	ldd	r19, Y+2	; 0x02
    2542:	26 30       	cpi	r18, 0x06	; 6
    2544:	31 05       	cpc	r19, r1
    2546:	0c f0       	brlt	.+2      	; 0x254a <wirelessControl+0x70>
    2548:	3b c0       	rjmp	.+118    	; 0x25c0 <wirelessControl+0xe6>
    254a:	32 c0       	rjmp	.+100    	; 0x25b0 <wirelessControl+0xd6>
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	8b 30       	cpi	r24, 0x0B	; 11
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <wirelessControl+0x7e>
    2556:	44 c0       	rjmp	.+136    	; 0x25e0 <wirelessControl+0x106>
    2558:	29 81       	ldd	r18, Y+1	; 0x01
    255a:	3a 81       	ldd	r19, Y+2	; 0x02
    255c:	2c 30       	cpi	r18, 0x0C	; 12
    255e:	31 05       	cpc	r19, r1
    2560:	5c f4       	brge	.+22     	; 0x2578 <wirelessControl+0x9e>
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	89 30       	cpi	r24, 0x09	; 9
    2568:	91 05       	cpc	r25, r1
    256a:	a1 f1       	breq	.+104    	; 0x25d4 <wirelessControl+0xfa>
    256c:	29 81       	ldd	r18, Y+1	; 0x01
    256e:	3a 81       	ldd	r19, Y+2	; 0x02
    2570:	2a 30       	cpi	r18, 0x0A	; 10
    2572:	31 05       	cpc	r19, r1
    2574:	94 f5       	brge	.+100    	; 0x25da <wirelessControl+0x100>
    2576:	2b c0       	rjmp	.+86     	; 0x25ce <wirelessControl+0xf4>
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	8d 30       	cpi	r24, 0x0D	; 13
    257e:	91 05       	cpc	r25, r1
    2580:	a9 f1       	breq	.+106    	; 0x25ec <wirelessControl+0x112>
    2582:	29 81       	ldd	r18, Y+1	; 0x01
    2584:	3a 81       	ldd	r19, Y+2	; 0x02
    2586:	2d 30       	cpi	r18, 0x0D	; 13
    2588:	31 05       	cpc	r19, r1
    258a:	6c f1       	brlt	.+90     	; 0x25e6 <wirelessControl+0x10c>
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	8e 30       	cpi	r24, 0x0E	; 14
    2592:	91 05       	cpc	r25, r1
    2594:	81 f1       	breq	.+96     	; 0x25f6 <wirelessControl+0x11c>
    2596:	31 c0       	rjmp	.+98     	; 0x25fa <wirelessControl+0x120>
	{
		case 1: LED_ON(LED_CHANNEL_0);
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
    259e:	2d c0       	rjmp	.+90     	; 0x25fa <wirelessControl+0x120>
				break;

		case 2: LED_OFF(LED_CHANNEL_0);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
    25a6:	29 c0       	rjmp	.+82     	; 0x25fa <wirelessControl+0x120>
				break;

		case 3: LED_ON(LED_CHANNEL_1);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
    25ae:	25 c0       	rjmp	.+74     	; 0x25fa <wirelessControl+0x120>
				break;

		case 4: LED_OFF(LED_CHANNEL_1);
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
    25b6:	21 c0       	rjmp	.+66     	; 0x25fa <wirelessControl+0x120>
				break;

		case 5: LED_ON(LED_CHANNEL_2);
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LED_ON>
    25be:	1d c0       	rjmp	.+58     	; 0x25fa <wirelessControl+0x120>
				break;

		case 6: LED_OFF(LED_CHANNEL_2);
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
    25c6:	19 c0       	rjmp	.+50     	; 0x25fa <wirelessControl+0x120>
				break;

		case 7: BUZZER_ON();
    25c8:	0e 94 b2 07 	call	0xf64	; 0xf64 <BUZZER_ON>
    25cc:	16 c0       	rjmp	.+44     	; 0x25fa <wirelessControl+0x120>
				break;

		case 8: BUZZER_OFF();
    25ce:	0e 94 bd 07 	call	0xf7a	; 0xf7a <BUZZER_OFF>
    25d2:	13 c0       	rjmp	.+38     	; 0x25fa <wirelessControl+0x120>
				break;

		case 9: SERVO_ON(); //OPEN DOOR
    25d4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <SERVO_ON>
    25d8:	10 c0       	rjmp	.+32     	; 0x25fa <wirelessControl+0x120>
				break;

		case 10: SERVO_OFF(); //CLOSE DOOR
    25da:	0e 94 06 10 	call	0x200c	; 0x200c <SERVO_OFF>
    25de:	0d c0       	rjmp	.+26     	; 0x25fa <wirelessControl+0x120>
				 break;

		case 11: DC_MOTOR_ON(); //TURN FAN ON
    25e0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DC_MOTOR_ON>
    25e4:	0a c0       	rjmp	.+20     	; 0x25fa <wirelessControl+0x120>
				 break;

		case 12: DC_MOTOR_OFF(); //TURN FAN OFF
    25e6:	0e 94 de 07 	call	0xfbc	; 0xfbc <DC_MOTOR_OFF>
    25ea:	07 c0       	rjmp	.+14     	; 0x25fa <wirelessControl+0x120>
				 break;

		case 13: LCD_WriteString((u8*) "Testing ESPI");
    25ec:	8c ed       	ldi	r24, 0xDC	; 220
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <LCD_WriteString>
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <wirelessControl+0x120>
				 break;

		case 14: LCD_Clear();
    25f6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
	}
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <keypad_CopyKeyPressed>:

void keypad_CopyKeyPressed(char *strPtr, u8 passwordSize)
{
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <keypad_CopyKeyPressed+0xa>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <keypad_CopyKeyPressed+0xc>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9b 83       	std	Y+3, r25	; 0x03
    2616:	8a 83       	std	Y+2, r24	; 0x02
    2618:	6c 83       	std	Y+4, r22	; 0x04
	u8 sizeCnt = 0;
    261a:	19 82       	std	Y+1, r1	; 0x01

	LCD_Clear();
    261c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
	LCD_WriteStringXY((u8*)"PASSWORD :", 0, 0);
    2620:	89 ee       	ldi	r24, 0xE9	; 233
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
	for(sizeCnt = 0; sizeCnt < passwordSize; /*EMPTY INCERMENT*/)
    262c:	19 82       	std	Y+1, r1	; 0x01
    262e:	4d c0       	rjmp	.+154    	; 0x26ca <keypad_CopyKeyPressed+0xc6>
	{
		if(Keypad_GetKeyPressed() > -1)
    2630:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    2634:	88 23       	and	r24, r24
    2636:	0c f4       	brge	.+2      	; 0x263a <keypad_CopyKeyPressed+0x36>
    2638:	48 c0       	rjmp	.+144    	; 0x26ca <keypad_CopyKeyPressed+0xc6>
		{
			if(Keypad_GetKeyPressed() == 35)
    263a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    263e:	83 32       	cpi	r24, 0x23	; 35
    2640:	a9 f4       	brne	.+42     	; 0x266c <keypad_CopyKeyPressed+0x68>
			{
				strcat(&strPtr[sizeCnt], "*");
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	8c 01       	movw	r16, r24
    264e:	02 0f       	add	r16, r18
    2650:	13 1f       	adc	r17, r19
    2652:	c8 01       	movw	r24, r16
    2654:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <strlen>
    2658:	80 0f       	add	r24, r16
    265a:	91 1f       	adc	r25, r17
    265c:	24 ef       	ldi	r18, 0xF4	; 244
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	b9 01       	movw	r22, r18
    2662:	42 e0       	ldi	r20, 0x02	; 2
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <memcpy>
    266a:	22 c0       	rjmp	.+68     	; 0x26b0 <keypad_CopyKeyPressed+0xac>
			}
			else if(Keypad_GetKeyPressed() == 42)
    266c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Keypad_GetKeyPressed>
    2670:	8a 32       	cpi	r24, 0x2A	; 42
    2672:	a9 f4       	brne	.+42     	; 0x269e <keypad_CopyKeyPressed+0x9a>
			{
				strcat(&strPtr[sizeCnt], "#");
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	9b 81       	ldd	r25, Y+3	; 0x03
    267e:	8c 01       	movw	r16, r24
    2680:	02 0f       	add	r16, r18
    2682:	13 1f       	adc	r17, r19
    2684:	c8 01       	movw	r24, r16
    2686:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <strlen>
    268a:	80 0f       	add	r24, r16
    268c:	91 1f       	adc	r25, r17
    268e:	26 ef       	ldi	r18, 0xF6	; 246
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	b9 01       	movw	r22, r18
    2694:	42 e0       	ldi	r20, 0x02	; 2
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <memcpy>
    269c:	09 c0       	rjmp	.+18     	; 0x26b0 <keypad_CopyKeyPressed+0xac>
			}
			else
			{
				Keypad_GetKeyPressedStr(&strPtr[sizeCnt]);
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	0e 94 4f 0c 	call	0x189e	; 0x189e <Keypad_GetKeyPressedStr>
			}
			LCD_WriteStringXY((u8*)strPtr, 0, 1);
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			delay(100);
    26bc:	84 e6       	ldi	r24, 0x64	; 100
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
			sizeCnt++;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	8f 5f       	subi	r24, 0xFF	; 255
    26c8:	89 83       	std	Y+1, r24	; 0x01
{
	u8 sizeCnt = 0;

	LCD_Clear();
	LCD_WriteStringXY((u8*)"PASSWORD :", 0, 0);
	for(sizeCnt = 0; sizeCnt < passwordSize; /*EMPTY INCERMENT*/)
    26ca:	99 81       	ldd	r25, Y+1	; 0x01
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	98 17       	cp	r25, r24
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <keypad_CopyKeyPressed+0xd0>
    26d2:	ae cf       	rjmp	.-164    	; 0x2630 <keypad_CopyKeyPressed+0x2c>
			LCD_WriteStringXY((u8*)strPtr, 0, 1);
			delay(100);
			sizeCnt++;
		}
	}
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	08 95       	ret

000026e6 <checkPassword>:

u8 checkPassword(void)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	2a 97       	sbiw	r28, 0x0a	; 10
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
	u8 HOME_PASSWORD[PASSWORD_SIZE] = "";
    26fa:	80 91 f8 00 	lds	r24, 0x00F8
    26fe:	90 91 f9 00 	lds	r25, 0x00F9
    2702:	a0 91 fa 00 	lds	r26, 0x00FA
    2706:	b0 91 fb 00 	lds	r27, 0x00FB
    270a:	8a 83       	std	Y+2, r24	; 0x02
    270c:	9b 83       	std	Y+3, r25	; 0x03
    270e:	ac 83       	std	Y+4, r26	; 0x04
    2710:	bd 83       	std	Y+5, r27	; 0x05
	itoa(PASSWORD, (char*)HOME_PASSWORD, 10);
    2712:	9e 01       	movw	r18, r28
    2714:	2e 5f       	subi	r18, 0xFE	; 254
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	8b e6       	ldi	r24, 0x6B	; 107
    271a:	99 e0       	ldi	r25, 0x09	; 9
    271c:	b9 01       	movw	r22, r18
    271e:	4a e0       	ldi	r20, 0x0A	; 10
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	0e 94 38 15 	call	0x2a70	; 0x2a70 <itoa>
	LCD_Clear();
    2726:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
	u8 passElement = 0;
    272a:	19 82       	std	Y+1, r1	; 0x01
	char enteredPassword[PASSWORD_SIZE] = "";
    272c:	80 91 f8 00 	lds	r24, 0x00F8
    2730:	90 91 f9 00 	lds	r25, 0x00F9
    2734:	a0 91 fa 00 	lds	r26, 0x00FA
    2738:	b0 91 fb 00 	lds	r27, 0x00FB
    273c:	8e 83       	std	Y+6, r24	; 0x06
    273e:	9f 83       	std	Y+7, r25	; 0x07
    2740:	a8 87       	std	Y+8, r26	; 0x08
    2742:	b9 87       	std	Y+9, r27	; 0x09

	/*Save entered password into array*/
	keypad_CopyKeyPressed(enteredPassword, PASSWORD_SIZE);
    2744:	ce 01       	movw	r24, r28
    2746:	06 96       	adiw	r24, 0x06	; 6
    2748:	64 e0       	ldi	r22, 0x04	; 4
    274a:	0e 94 02 13 	call	0x2604	; 0x2604 <keypad_CopyKeyPressed>
	/*Compare between entered password and saved password*/
	for(passElement = 0; passElement < PASSWORD_SIZE; /*EMPTY INCERMENT*/)
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	1a c0       	rjmp	.+52     	; 0x2786 <checkPassword+0xa0>
	{
		if(HOME_PASSWORD[passElement] == enteredPassword[passElement])
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	ce 01       	movw	r24, r28
    275a:	02 96       	adiw	r24, 0x02	; 2
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	40 81       	ld	r20, Z
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	ce 01       	movw	r24, r28
    276c:	06 96       	adiw	r24, 0x06	; 6
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	80 81       	ld	r24, Z
    2776:	48 17       	cp	r20, r24
    2778:	21 f4       	brne	.+8      	; 0x2782 <checkPassword+0x9c>
		{
			passElement++;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <checkPassword+0xa0>
		}
		else
		{
			return 0;
    2782:	1a 86       	std	Y+10, r1	; 0x0a
    2784:	05 c0       	rjmp	.+10     	; 0x2790 <checkPassword+0xaa>
	char enteredPassword[PASSWORD_SIZE] = "";

	/*Save entered password into array*/
	keypad_CopyKeyPressed(enteredPassword, PASSWORD_SIZE);
	/*Compare between entered password and saved password*/
	for(passElement = 0; passElement < PASSWORD_SIZE; /*EMPTY INCERMENT*/)
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	84 30       	cpi	r24, 0x04	; 4
    278a:	18 f3       	brcs	.-58     	; 0x2752 <checkPassword+0x6c>
		{
			return 0;
		}
	}

	return 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	8a 87       	std	Y+10, r24	; 0x0a
    2790:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2792:	2a 96       	adiw	r28, 0x0a	; 10
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <DOOR_OPEN>:

void DOOR_OPEN(void)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
	SERVO_ON();
    27ac:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <SERVO_ON>
}
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <DOOR_CLOSE>:

void DOOR_CLOSE(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	SERVO_OFF();
    27be:	0e 94 06 10 	call	0x200c	; 0x200c <SERVO_OFF>
}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <FAN_OPEN>:

void FAN_OPEN(void)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_ON();
    27d0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DC_MOTOR_ON>
}
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <FAN_CLOSE>:

void FAN_CLOSE(void)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_OFF();
    27e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <DC_MOTOR_OFF>
}
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <closeAll>:

void closeAll(void)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
	LED_OFF(LED_CHANNEL_0);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
	LED_OFF(LED_CHANNEL_1);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
	LED_OFF(LED_CHANNEL_2);
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LED_OFF>
	SERVO_OFF();
    2806:	0e 94 06 10 	call	0x200c	; 0x200c <SERVO_OFF>
	DC_MOTOR_OFF();
    280a:	0e 94 de 07 	call	0xfbc	; 0xfbc <DC_MOTOR_OFF>
	BUZZER_OFF();
    280e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <BUZZER_OFF>
	LCD_Clear();
    2812:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
}
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <checkFireFlag>:

void checkFireFlag(void)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
	delay(100);
    2824:	84 e6       	ldi	r24, 0x64	; 100
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
	if(TEMP_GetFireFlag())
    282c:	0e 94 81 10 	call	0x2102	; 0x2102 <TEMP_GetFireFlag>
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <checkFireFlag+0x1a>
    2834:	43 c0       	rjmp	.+134    	; 0x28bc <checkFireFlag+0xa0>
	{
		BUZZER_ON();
    2836:	0e 94 b2 07 	call	0xf64	; 0xf64 <BUZZER_ON>
		LCD_Clear();
    283a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
		LCD_WriteStringXY((u8*)"Opening FAN HOT!", 0, 0);
    283e:	8c ef       	ldi	r24, 0xFC	; 252
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
		FAN_OPEN();
    284a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <FAN_OPEN>
		delay(1000);
    284e:	88 ee       	ldi	r24, 0xE8	; 232
    2850:	93 e0       	ldi	r25, 0x03	; 3
    2852:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
		LCD_Clear();
    2856:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
		LCD_WriteStringXY((u8*)"TEMP READ = ", 0, 0);
    285a:	8d e0       	ldi	r24, 0x0D	; 13
    285c:	91 e0       	ldi	r25, 0x01	; 1
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
    2866:	0e c0       	rjmp	.+28     	; 0x2884 <checkFireFlag+0x68>
		while(TEMP_GetFireFlag())
		{
			TEMP_STR_READ(tempRead);
    2868:	81 e3       	ldi	r24, 0x31	; 49
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	0e 94 4c 10 	call	0x2098	; 0x2098 <TEMP_STR_READ>
			LCD_WriteStringXY((u8*)tempRead, 0, 1);
    2870:	81 e3       	ldi	r24, 0x31	; 49
    2872:	92 e0       	ldi	r25, 0x02	; 2
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
			delay(100);
    287c:	84 e6       	ldi	r24, 0x64	; 100
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
		LCD_WriteStringXY((u8*)"Opening FAN HOT!", 0, 0);
		FAN_OPEN();
		delay(1000);
		LCD_Clear();
		LCD_WriteStringXY((u8*)"TEMP READ = ", 0, 0);
		while(TEMP_GetFireFlag())
    2884:	0e 94 81 10 	call	0x2102	; 0x2102 <TEMP_GetFireFlag>
    2888:	88 23       	and	r24, r24
    288a:	71 f7       	brne	.-36     	; 0x2868 <checkFireFlag+0x4c>
		{
			TEMP_STR_READ(tempRead);
			LCD_WriteStringXY((u8*)tempRead, 0, 1);
			delay(100);
		}
		LCD_Clear();
    288c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
		LCD_WriteStringXY((u8*)"Closing BUZZER", 0, 0);
    2890:	8a e1       	ldi	r24, 0x1A	; 26
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	40 e0       	ldi	r20, 0x00	; 0
    2898:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
		LCD_WriteStringXY((u8*)"Closing FAN", 0, 1);
    289c:	86 eb       	ldi	r24, 0xB6	; 182
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_WriteStringXY>
		FAN_CLOSE();
    28a8:	0e 94 ed 13 	call	0x27da	; 0x27da <FAN_CLOSE>
		BUZZER_OFF();
    28ac:	0e 94 bd 07 	call	0xf7a	; 0xf7a <BUZZER_OFF>
		delay(1000);
    28b0:	88 ee       	ldi	r24, 0xE8	; 232
    28b2:	93 e0       	ldi	r25, 0x03	; 3
    28b4:	0e 94 61 14 	call	0x28c2	; 0x28c2 <delay>
		LCD_Clear();
    28b8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <LCD_Clear>
	}
}
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <delay>:

void delay(u16 duration)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	60 97       	sbiw	r28, 0x10	; 16
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	98 8b       	std	Y+16, r25	; 0x10
    28d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(duration);
    28da:	8f 85       	ldd	r24, Y+15	; 0x0f
    28dc:	98 89       	ldd	r25, Y+16	; 0x10
    28de:	cc 01       	movw	r24, r24
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	9c 87       	std	Y+12, r25	; 0x0c
    28f4:	ad 87       	std	Y+13, r26	; 0x0d
    28f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a e7       	ldi	r20, 0x7A	; 122
    2906:	55 e4       	ldi	r21, 0x45	; 69
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8f 83       	std	Y+7, r24	; 0x07
    2912:	98 87       	std	Y+8, r25	; 0x08
    2914:	a9 87       	std	Y+9, r26	; 0x09
    2916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <delay+0x78>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <delay+0xf6>
	else if (__tmp > 65535)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <delay+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	0f c0       	rjmp	.+30     	; 0x299a <delay+0xd8>
    297c:	80 e9       	ldi	r24, 0x90	; 144
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <delay+0xc6>
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <delay+0xba>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <delay+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <delay+0x102>
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
}
    29cc:	60 96       	adiw	r28, 0x10	; 16
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <__prologue_saves__>:
    29de:	2f 92       	push	r2
    29e0:	3f 92       	push	r3
    29e2:	4f 92       	push	r4
    29e4:	5f 92       	push	r5
    29e6:	6f 92       	push	r6
    29e8:	7f 92       	push	r7
    29ea:	8f 92       	push	r8
    29ec:	9f 92       	push	r9
    29ee:	af 92       	push	r10
    29f0:	bf 92       	push	r11
    29f2:	cf 92       	push	r12
    29f4:	df 92       	push	r13
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	ca 1b       	sub	r28, r26
    2a08:	db 0b       	sbc	r29, r27
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	09 94       	ijmp

00002a16 <__epilogue_restores__>:
    2a16:	2a 88       	ldd	r2, Y+18	; 0x12
    2a18:	39 88       	ldd	r3, Y+17	; 0x11
    2a1a:	48 88       	ldd	r4, Y+16	; 0x10
    2a1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a20:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a22:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a24:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a26:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a28:	b9 84       	ldd	r11, Y+9	; 0x09
    2a2a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a2c:	df 80       	ldd	r13, Y+7	; 0x07
    2a2e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a30:	fd 80       	ldd	r15, Y+5	; 0x05
    2a32:	0c 81       	ldd	r16, Y+4	; 0x04
    2a34:	1b 81       	ldd	r17, Y+3	; 0x03
    2a36:	aa 81       	ldd	r26, Y+2	; 0x02
    2a38:	b9 81       	ldd	r27, Y+1	; 0x01
    2a3a:	ce 0f       	add	r28, r30
    2a3c:	d1 1d       	adc	r29, r1
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	ed 01       	movw	r28, r26
    2a4a:	08 95       	ret

00002a4c <memcpy>:
    2a4c:	fb 01       	movw	r30, r22
    2a4e:	dc 01       	movw	r26, r24
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <memcpy+0xa>
    2a52:	01 90       	ld	r0, Z+
    2a54:	0d 92       	st	X+, r0
    2a56:	41 50       	subi	r20, 0x01	; 1
    2a58:	50 40       	sbci	r21, 0x00	; 0
    2a5a:	d8 f7       	brcc	.-10     	; 0x2a52 <memcpy+0x6>
    2a5c:	08 95       	ret

00002a5e <strlen>:
    2a5e:	fc 01       	movw	r30, r24
    2a60:	01 90       	ld	r0, Z+
    2a62:	00 20       	and	r0, r0
    2a64:	e9 f7       	brne	.-6      	; 0x2a60 <strlen+0x2>
    2a66:	80 95       	com	r24
    2a68:	90 95       	com	r25
    2a6a:	8e 0f       	add	r24, r30
    2a6c:	9f 1f       	adc	r25, r31
    2a6e:	08 95       	ret

00002a70 <itoa>:
    2a70:	fb 01       	movw	r30, r22
    2a72:	9f 01       	movw	r18, r30
    2a74:	e8 94       	clt
    2a76:	42 30       	cpi	r20, 0x02	; 2
    2a78:	c4 f0       	brlt	.+48     	; 0x2aaa <itoa+0x3a>
    2a7a:	45 32       	cpi	r20, 0x25	; 37
    2a7c:	b4 f4       	brge	.+44     	; 0x2aaa <itoa+0x3a>
    2a7e:	4a 30       	cpi	r20, 0x0A	; 10
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <itoa+0x1c>
    2a82:	97 fb       	bst	r25, 7
    2a84:	1e f4       	brtc	.+6      	; 0x2a8c <itoa+0x1c>
    2a86:	90 95       	com	r25
    2a88:	81 95       	neg	r24
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	64 2f       	mov	r22, r20
    2a8e:	77 27       	eor	r23, r23
    2a90:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__udivmodhi4>
    2a94:	80 5d       	subi	r24, 0xD0	; 208
    2a96:	8a 33       	cpi	r24, 0x3A	; 58
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <itoa+0x2c>
    2a9a:	89 5d       	subi	r24, 0xD9	; 217
    2a9c:	81 93       	st	Z+, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	a1 f7       	brne	.-24     	; 0x2a8c <itoa+0x1c>
    2aa4:	16 f4       	brtc	.+4      	; 0x2aaa <itoa+0x3a>
    2aa6:	5d e2       	ldi	r21, 0x2D	; 45
    2aa8:	51 93       	st	Z+, r21
    2aaa:	10 82       	st	Z, r1
    2aac:	c9 01       	movw	r24, r18
    2aae:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <strrev>

00002ab2 <strrev>:
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	67 2f       	mov	r22, r23
    2ab8:	71 91       	ld	r23, Z+
    2aba:	77 23       	and	r23, r23
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <strrev+0x4>
    2abe:	32 97       	sbiw	r30, 0x02	; 2
    2ac0:	04 c0       	rjmp	.+8      	; 0x2aca <strrev+0x18>
    2ac2:	7c 91       	ld	r23, X
    2ac4:	6d 93       	st	X+, r22
    2ac6:	70 83       	st	Z, r23
    2ac8:	62 91       	ld	r22, -Z
    2aca:	ae 17       	cp	r26, r30
    2acc:	bf 07       	cpc	r27, r31
    2ace:	c8 f3       	brcs	.-14     	; 0x2ac2 <strrev+0x10>
    2ad0:	08 95       	ret

00002ad2 <__udivmodhi4>:
    2ad2:	aa 1b       	sub	r26, r26
    2ad4:	bb 1b       	sub	r27, r27
    2ad6:	51 e1       	ldi	r21, 0x11	; 17
    2ad8:	07 c0       	rjmp	.+14     	; 0x2ae8 <__udivmodhi4_ep>

00002ada <__udivmodhi4_loop>:
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	a6 17       	cp	r26, r22
    2ae0:	b7 07       	cpc	r27, r23
    2ae2:	10 f0       	brcs	.+4      	; 0x2ae8 <__udivmodhi4_ep>
    2ae4:	a6 1b       	sub	r26, r22
    2ae6:	b7 0b       	sbc	r27, r23

00002ae8 <__udivmodhi4_ep>:
    2ae8:	88 1f       	adc	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	5a 95       	dec	r21
    2aee:	a9 f7       	brne	.-22     	; 0x2ada <__udivmodhi4_loop>
    2af0:	80 95       	com	r24
    2af2:	90 95       	com	r25
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	08 95       	ret

00002afa <_exit>:
    2afa:	f8 94       	cli

00002afc <__stop_program>:
    2afc:	ff cf       	rjmp	.-2      	; 0x2afc <__stop_program>
